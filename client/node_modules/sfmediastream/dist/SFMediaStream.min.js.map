{"version":3,"sources":["a_init.js","AudioStreamer.js","BufferHeader.js","Convert.js","MediaBuffer.js","MediaPlayer.js","MediaPresenter.js","Plugin/Chorus.js","Plugin/ConReverb.js","Plugin/CutOff.js","Plugin/Delay.js","Plugin/Distortion.js","Plugin/DubDelay.js","Plugin/Equalizer.js","Plugin/Fade.js","Plugin/Flanger.js","Plugin/Harmonizer.js","Plugin/Noise.js","Plugin/PingPongDelay.js","Plugin/PitchShift.js","Plugin/Reverb.js","Plugin/StereoPanner.js","Plugin/Tremolo.js","Plugin/Vibrato.js","VideoStreamer.js","z_extra.js"],"names":["global","factory","exports","_typeof","module","window","this","moduleMode","ScarletsMedia","audioContext","getElementAudioNode","elem","crossOrigin","createMediaElementSource","getElementVideoNode","ScarletsMediaEffect","audioCodecs","webm","mp4","ogg","videoCodecs","3gpp","waitingUnlock","userInteracted","AudioContext","webkitAudioContext","console","error","mobileMediaUnlock","e","emptyBuffer","createBuffer","source","createBufferSource","buffer","connect","destination","onended","disconnect","removeListener","start","noteOn","resume","document","removeEventListener","i","length","addEventListener","ScarletsAudioStreamer","chunksDuration","chunksSeconds","scope","debug","playing","latency","mimeType","bufferElement","onStop","outputNode","directAudioOutput","bufferHeader","mediaBuffer","audioElement","element","Audio","audioNode","target","node","createGain","stop","buffering","setBufferHeader","packet","data","arrayBuffer","MediaBuffer","Uint8Array","src","objectURL","decodeAudioData","slice","audioBuffer","noiseLength","getChannelData","webAudioBufferInsert","index","temp","frameCount","channelLength","numberOfChannels","newBuffer","sampleRate","set","subarray","cleanNoise","context","playStream","bufferElementIndex","realtimeBufferPlay","streamingTime","log","byteLength","Number","String","Date","now","baseLatency","finalBuffer","addBufferHeader","receiveBuffer","append","paused","play","BufferHeader","audio/webm;codecs=opus","convert","midiToFreq","midi","Math","pow","floor","freqToMidi","freq","LN2","powerToDb","power","db","LN10","dbToPower","exp","ampToDb","lin","dbToAmp","velToAmp","velocity","MediaSource","URL","createObjectURL","removing","totalTime","sourceBuffer","buffers","startAppending","appendBuffer","onsourceopen","addSourceBuffer","mode","onerror","onupdateend","remove","updating","shift","buffered","push","abort","readyState","endOfStream","ScarletsMediaPlayer","self","constructor","createElement","body","appendChild","propertyLinker","audioOutputNode","Object","defineProperty","get","enumerable","tagName","toLowerCase","concat","videoOutputNode","load","canPlayType","extra","objectPropertyLinker","preload","crossorigin","audioFadeEffect","speed","undefined","defaultPlaybackRate","playbackRate","mute","muted","defaultMuted","pause","currentTime","volume","stillWaiting","successCallback","errorCallback","then","catch","fadeNumber","num","callback","prepare","links","force","querySelectorAll","once","off","insertAdjacentHTML","split","join","eventRegistered","eventTrigger","type","on","eventName","name","splice","indexOf","destroy","key","playlist","list","original","innerHTML","playlistInitialized","internalPlaylistEvent","currentIndex","next","loop","playlistTriggerEvent","shuffled","reload","lists","shuffle","add","obj","autoplay","previous","stream","currentSrc","j","x","random","ScarletsMediaPresenter","options","mediaStream","onRecordingReady","onBufferProcess","mediaRecorder","recordingReady","recording","mediaGranted","captureStream","workerOptions","mediaType","video","MediaRecorder","usingOpusMediaRecorderPolyfill","OpusMediaRecorder","alwaysUsePolyfill","isTypeSupported","supportedMimeType","codecsList","format","codecs","audio","createMediaStreamSource","pendingConnect","firstSourceConnect","bufferHeaderLength","onstart","isVideo","headerLatency","ondataavailable","state","size","predefinedBuffer","chrome","buff","Blob","atob","UInt","charCodeAt","getBufferHeader","startTime","hasVideo","setTimeout","createMediaStreamDestination","reAddTracks","streams","getTracks","addTrack","afterStop","startRecording","screen","navigator","mediaDevices","getDisplayMedia","getUserMedia","stopRecording","removeTrack","chorus","sourceNode","output","input","dry","wet","splitter","createChannelSplitter","merger","createChannelMerger","channel","c","delayVibrato","createDelay","delayFixed","feedback","feedforward","blend","lfo","createOscillator","LDepth","RDepth","delayTime","frequency","value","gain","rate","intensity","mix","ret","conReverb","reverbNode","createConvolver","wetGainNode","dryGainNode","setBuffer","loadBuffer","url","ajaxRequest","XMLHttpRequest","open","responseType","onload","audioData","response","err","send","cutOff","passType","filterNode","createBiquadFilter","Q","width","delay","feedbackGainNode","delayNode","time","distortion","deg","PI","waveShaperNode","createWaveShaper","amount","curve","Float32Array","abs","dubDelay","bqFilterNode","cutoff","equalizer","frequencies","lastIndex","filter","dB","fade","in","cancelScheduledValues","remainingTime","setTargetAtTime","out","flanger","inputFeedbackNode","oscillatorNode","gainNode","feedbackNode","denormalize","normalize","depth","harmonizer","filters1","filters2","gains","pitch","slope","f0","sin","q","noise","noiseFloat32","sqrt","cos","noiseBuffer","to","loopStart","pingPongDelay","delayNodeLeft","delayNodeRight","channelMerger","pitchShift","bufferTime","fadeTime","bufferRate","modulateGain1","modulateGain2","delayNode1","delayNode2","fTime","bTime","createPitchBuffer","shiftUp","bufferSource","bufferGain","fadeBuffer","fadeLength","bufferLeft","createPitchFadeBuffer","fadeNode","mixNode","pitchGain","pitchUp","reverb","decay","reverse","rebuildImpulse","impulse","impulseL","impulseR","n","stereoPanner","stereoSupport","createStereoPanner","pannerNode","createPanner","pan","setPosition","tremolo","tremoloGainNode","shaperNode","lfoNode","vibrato","depthNode","ScarletsVideoStreamer","videoElement","audioConnect","audioDisconnect","isMobile","test","userAgent","property","configurable","min","max","maxFade","from","increment","onIncrease","onFinish","current","interval","Infinity","timer","setInterval","clearInterval","ceil","timeout","timeoutIncrement","preciseTimeout","func","miliseconds","id","when","fallback","clearPreciseTimer","startPreciseTime","clearPreciseTimeout","intervalIncrement","preciseInterval","clearPreciseInterval","preciseTimerStarted","requestAnimationFrame","preciseTimer","clearTimeout","Media","MediaEffect","AudioStreamer","VideoStreamer","MediaPlayer","MediaPresenter","ScarletsMediaBuffer"],"mappings":"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","file":"SFMediaStream.min.js","sourcesContent":["/*\r\n\tScarletsFiction MediaStream Library\r\n\r\n\tHTML5 media streamer library for playing music, video, playlist,\r\n\tor even live streaming microphone & camera with node server\r\n\thttps://github.com/ScarletsFiction/SFMediaStream\r\n*/\r\n(function(global, factory){\r\n  if(typeof exports === 'object' && typeof module !== 'undefined'){\r\n  \tmodule.exports = {};\r\n  \tfactory(module.exports, window, true);\r\n  }\r\n  else factory(global, window);\r\n}(this || window, (function(global, window, moduleMode){'use strict';\r\n// ===== Module Init =====\r\n\r\n// Initialize global data\r\nvar ScarletsMedia = {\r\n\taudioContext: false, // Created after user gesture\r\n\r\n\t// Get Audio Node from HTML5's audio tag\r\n\tgetElementAudioNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn this.audioContext.createMediaElementSource(elem);\r\n\t},\r\n\r\n\t// videoContext: window.VideoContext ? new VideoContext() : false,\r\n\r\n\t// Still underdevelopment: https://github.com/bbc/VideoContext\r\n\tgetElementVideoNode:function(elem){\r\n\t\telem.crossOrigin = 'anonymous';\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nvar ScarletsMediaEffect = {};\r\nvar audioCodecs = {\r\n\twebm:['opus', 'vorbis'],\r\n\tmp4:['mp4a.67', 'mp4a.40.29', 'mp4a.40.5', 'mp4a.40.2', 'mp3'],\r\n\togg:['opus', 'vorbis'], // This may not work on mobile\r\n};\r\nvar videoCodecs = {\r\n\twebm:['vp8,opus', 'vp8,vorbis'],\r\n\tmp4:['mp4v.20.8,mp4a.40.2', 'mp4v.20.240,mp4a.40.2', 'avc1.42E01E,mp4a.40.2', 'avc1.58A01E,mp4a.40.2', 'avc1.64001E,mp4a.40.2'],\r\n\t'3gpp':['mp4v.20.8,samr'],\r\n\togg:['dirac,vorbis', 'theora,vorbis'], // This may not work on mobile\r\n};\r\n\r\nvar waitingUnlock = [];\r\nvar userInteracted = false;\r\n\r\n// Unlock mobile media security\r\n(function(){\r\n\tconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\tif(!AudioContext) return console.error(\"`AudioContext` was not available\");\r\n\tScarletsMedia.audioContext = new AudioContext();\r\n\r\n\tvar mobileMediaUnlock = function(e){\r\n\t\tvar emptyBuffer = ScarletsMedia.audioContext.createBuffer(1, 1, 22050);\r\n\t\tvar source = ScarletsMedia.audioContext.createBufferSource();\r\n\t\tsource.buffer = emptyBuffer;\r\n\t\tsource.connect(ScarletsMedia.audioContext.destination);\r\n\r\n\t\tsource.onended = function(){\r\n\t\t\tsource.disconnect(0);\r\n\t\t\tsource = emptyBuffer = null;\r\n\r\n\t\t\tremoveListener();\r\n\t\t}\r\n\r\n\t\t// Play the empty buffer.\r\n\t\tif(!source.start) source.noteOn(0);\r\n\t\telse source.start(0);\r\n\t\tScarletsMedia.audioContext.resume();\r\n\t}\r\n\r\n\tfunction removeListener(){\r\n\t\tdocument.removeEventListener('touchstart', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('touchend', mobileMediaUnlock, true);\r\n\t\tdocument.removeEventListener('click', mobileMediaUnlock, true);\r\n\r\n\t\tfor (var i = 0; i < waitingUnlock.length; i++) {\r\n\t\t\twaitingUnlock[i]();\r\n\t\t}\r\n\r\n\t\twaitingUnlock.length = 0;\r\n\t}\r\n\r\n\tdocument.addEventListener('touchstart', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('touchend', mobileMediaUnlock, true);\r\n\tdocument.addEventListener('click', mobileMediaUnlock, true);\r\n})();","// Minimum 3 bufferElement\r\nvar ScarletsAudioStreamer = function(chunksDuration){\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\tscope.bufferElement = [];\r\n\r\n\tscope.onStop = null;\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar bufferHeader = false;\r\n\tvar mediaBuffer = false;\r\n\r\n\tvar audioElement = scope.element = new Audio();\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(audioElement);\r\n\r\n\t// ToDo: we may need to try to recreate the element if error happen\r\n\t// Or reducing the extra latency\r\n\taudioElement.addEventListener('error', function(e){\r\n\t\tconsole.error(e.target.error);\r\n\t});\r\n\r\n\tscope.connect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.disconnect = function(node){\r\n\t\tscope.outputNode.disconnect(node);\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect(node);\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t\tif (scope.onStop) scope.onStop();\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet.data){\r\n\t\t\tbufferHeader = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\t\tbufferHeader = new Uint8Array(arrayBuffer);\r\n\r\n\t\taudioElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\r\n\t\t// Get buffer noise length\r\n\t\tscope.audioContext.decodeAudioData(arrayBuffer.slice(0), function(audioBuffer){\r\n\t\t\t// headerDuration = audioBuffer.duration;\r\n\t\t\tnoiseLength = audioBuffer.getChannelData(0).length;\r\n\t\t});\r\n\t}\r\n\r\n\t// ===== For handling WebAudio =====\r\n\tfunction createBufferSource(){\r\n\t\tvar temp = scope.audioContext.createBufferSource();\r\n\t\ttemp.onended = function(){\r\n\t\t\tthis.stop();\r\n\t\t\tthis.disconnect();\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tvar addBufferHeader = function(arrayBuffer){\r\n\t\tvar finalBuffer = new Uint8Array(bufferHeader.byteLength + arrayBuffer.byteLength);\r\n\t\tfinalBuffer.set(bufferHeader, 0);\r\n\t\tfinalBuffer.set(new Uint8Array(arrayBuffer), bufferHeader.byteLength);\r\n\t\treturn finalBuffer.buffer;\r\n\t}\r\n\r\n\tvar noiseLength = 0;\r\n\tfunction cleanNoise(buffer){\r\n\t\tvar frameCount = buffer.getChannelData(0).length - noiseLength;\r\n\t\tif(frameCount === 0) return false;\r\n\r\n  \t\tvar channelLength = buffer.numberOfChannels;\r\n\t\tvar newBuffer = scope.audioContext.createBuffer(channelLength, frameCount, buffer.sampleRate);\r\n\r\n\t\tfor (var i = 0; i < channelLength; i++) {\r\n\t    \tnewBuffer.getChannelData(i).set(buffer.getChannelData(i).subarray(noiseLength));\r\n\t    }\r\n\r\n\t    return newBuffer;\r\n\t}\r\n\r\n\tfunction webAudioBufferInsert(index, buffer){\r\n\t\tscope.bufferElement[index] = createBufferSource();\r\n\t\tbuffer = cleanNoise(buffer);\r\n\r\n\t\tif(buffer === false) return false;\r\n\t\tscope.bufferElement[index].buffer = buffer;\r\n\r\n\t\tif(scope.outputNode && scope.outputNode.context && directAudioOutput === false)\r\n\t\t\tscope.bufferElement[index].connect(scope.outputNode);\r\n\r\n\t\telse // Direct output to destination\r\n\t\t\tscope.bufferElement[index].connect(scope.audioContext.destination);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ===== Realtime Playing =====\r\n\t// Play audio immediately after received\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tvar bufferElementIndex = 0;\r\n\tscope.realtimeBufferPlay = function(packet){\r\n\t\tif(scope.playing === false) return;\r\n\r\n\t\tvar arrayBuffer = packet[0];\r\n\t\tvar streamingTime = packet[1];\r\n\r\n\t\tif(scope.debug) console.log(\"Receiving data\", arrayBuffer.byteLength);\r\n\t\tif(arrayBuffer.byteLength === 0) return;\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) + chunksSeconds + scope.audioContext.baseLatency;\r\n\r\n\t\tvar index = bufferElementIndex;\r\n\t\tbufferElementIndex++;\r\n\t\tif(bufferElementIndex > 2)\r\n\t\t\tbufferElementIndex = 0;\r\n\r\n\t\tscope.audioContext.decodeAudioData(addBufferHeader(arrayBuffer), function(buffer){\r\n\t\t\tif(webAudioBufferInsert(index, buffer) === false)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tscope.bufferElement[index].start(0);\r\n\t\t});\r\n\t}\r\n\r\n\t// ====== Synchronous Playing ======\r\n\t// Play next audio when last audio was finished\r\n\r\n\tscope.receiveBuffer = function(packet){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tvar arrayBuffer = packet[0];\r\n\t\tvar streamingTime = packet[1];\r\n\r\n\t\tmediaBuffer.append(arrayBuffer);\r\n\r\n\t\tif(audioElement.paused)\r\n\t\t\taudioElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) +  scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}\r\n","var BufferHeader = {\r\n\t\"audio/webm;codecs=opus\": \"GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQRChYECGFOAZwH/////////FUmpZpkq17GDD0JATYCGQ2hyb21lV0GGQ2hyb21lFlSua7+uvdeBAXPFh7o5nyc1kHqDgQKGhkFfT1BVU2Oik09wdXNIZWFkAQIAAIC7AAAAAADhjbWERzuAAJ+BAmJkgSAfQ7Z1Af/////////ngQCjjIEAAID/A//+//7//qM=\"\r\n};\r\n\r\nfunction getBufferHeader(type) {\r\n\tif (!window.chrome && type === \"audio/webm;codecs=opus\" ) {\r\n\t\t// this header is only for chrome based brosers\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar buff = BufferHeader[type];\r\n\tif(buff === void 0) return false;\r\n\r\n\tif(buff.constructor === Blob)\r\n\t\treturn buff;\r\n\r\n\tbuff = atob(buff);\r\n\r\n\tvar UInt = new Uint8Array(buff.length);\r\n\tfor (var i = 0; i < buff.length; i++)\r\n\t\tUInt[i] = buff.charCodeAt(i);\r\n\r\n\treturn BufferHeader[type] = new Blob([UInt]);\r\n}","ScarletsMedia.convert = {\r\n\t// Converts a MIDI pitch number to frequency.\r\n\t// midi = 0 ~ 127\r\n\tmidiToFreq:function (midi) {\r\n\t    if(midi <= -1500) return 0;\r\n\t    else if(midi > 1499) return 3.282417553401589e+38;\r\n\t    else return 440.0 * Math.pow(2, (Math.floor(midi) - 69) / 12.0);\r\n\t},\r\n\r\n\t// Converts frequency to MIDI pitch.\r\n\tfreqToMidi:function(freq){\r\n\t\tif(freq > 0)\r\n\t\t\treturn Math.floor(Math.log(freq/440.0) / Math.LN2 * 12 + 69);\r\n\t\telse return -1500;\r\n\t},\r\n\r\n    // Converts power to decibel. Note that it is off by 100dB to make it\r\n\tpowerToDb:function(power){\r\n\t    if (power <= 0)\r\n\t    \treturn 0;\r\n\t    else {\r\n\t        var db = 100 + 10.0 / Math.LN10 * Math.log(power);\r\n\t        if(db < 0) return 0;\r\n\t        return db;\r\n\t    }\r\n\t},\r\n\r\n    // Converts decibel to power\r\n\tdbToPower:function(db){\r\n\t    if (db <= 0) return 0;\r\n\t    else {\r\n  \t        if (db > 870) db = 870;\r\n  \t        return Math.exp(Math.LN10 * 0.1 * (db - 100.0));\r\n\t    }\r\n\t},\r\n\r\n\t// Converts amplitude to decibel.\r\n\tampToDb:function(lin){\r\n\t    return 20.0 * (lin > 0.00001 ? (Math.log(lin) / Math.LN10) : -5.0);\r\n\t},\r\n\r\n\t// Converts decibel to amplitude\r\n\tdbToAmp:function(db) {\r\n\t    return Math.pow(10.0, db / 20.0);\r\n\t},\r\n\r\n\t// Converts MIDI velocity to amplitude\r\n\tvelToAmp:function (velocity) {\r\n\t    return velocity / 127;\r\n\t},\r\n}","var MediaBuffer = function(mimeType, chunksDuration, bufferHeader){\r\n\tvar scope = this;\r\n\tscope.source = new MediaSource();\r\n\tscope.objectURL = URL.createObjectURL(scope.source);\r\n\r\n\tvar removing = false;\r\n\tvar totalTime = 0; // miliseconds\r\n\tvar sourceBuffer = null;\r\n\tvar buffers = [];\r\n\r\n\tscope.source.onsourceopen = function(){\r\n\t\tsourceBuffer = scope.source.addSourceBuffer(mimeType);\r\n\t\tsourceBuffer.mode = 'sequence';\r\n\t\tsourceBuffer.appendBuffer(bufferHeader);\r\n\r\n\t\tsourceBuffer.onerror = function(e){\r\n\t\t\tconsole.error(\"SourceBuffer error:\", e);\r\n\t\t}\r\n\r\n\t\tsourceBuffer.onupdateend = function(){\r\n\t\t\tif(removing){\r\n\t\t\t\tremoving = false;\r\n\t\t\t\ttotalTime = 10000;\r\n\r\n\t\t\t\t// 0 ~ 10 seconds\r\n\t\t\t\tsourceBuffer.remove(0, 10);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(!sourceBuffer.updating && buffers.length !== 0)\r\n\t\t\t\tstartAppending(buffers.shift());\r\n\t\t};\r\n\t};\r\n\r\n\tfunction startAppending(buffer){\r\n\t\tsourceBuffer.appendBuffer(buffer);\r\n\t\ttotalTime += chunksDuration;\r\n\t\t// console.log(totalTime, buffer);\r\n\t}\r\n\r\n\tscope.source.onerror = function(e){\r\n\t\tconsole.error(\"MediaSource error:\", e);\r\n\t}\r\n\r\n\tscope.append = function(arrayBuffer){\r\n\t\tif(sourceBuffer === null)\r\n\t\t\treturn false;\r\n\r\n\t\tif (!sourceBuffer.updating && sourceBuffer.buffered.length === 2)\r\n\t\t\t// The problem of accessing to 'sourceBuffer.buffered' is that after you append data, the SourceBuffer instance becomes temporarily unusable while it's working.\r\n\t\t\t// During this time, the SourceBuffer's updating property will be set to true, so it's easy to check for.\r\n\t\t\tconsole.log('something wrong');\r\n\r\n\t\tif(totalTime >= 20000)\r\n\t\t\tremoving = true;\r\n\r\n\t\tif(!sourceBuffer.updating)\r\n\t\t\tstartAppending(arrayBuffer);\r\n\t\telse\r\n\t\t\tbuffers.push(arrayBuffer);\r\n\r\n\t\treturn totalTime/1000;\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tif(sourceBuffer.updating)\r\n\t\t\tsourceBuffer.abort();\r\n\r\n\t\tif(scope.source.readyState === \"open\")\r\n\t\t\tscope.source.endOfStream();\r\n\t}\r\n}","// https://www.w3schools.com/tags/ref_av_dom.asp\r\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\r\nvar ScarletsMediaPlayer = function(element){\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tvar self = this;\r\n\r\n\tif(element === void 0)\r\n\t\telement = 'audio';\r\n\r\n\tif(element.constructor === String){\r\n\t\tif(element !== 'audio' && element !== 'video')\r\n\t\t\treturn console.error('Supported player is \"audio\" or \"video\"');\r\n\r\n\t\telement = document.createElement(element);\r\n\t\tdocument.body.appendChild(element);\r\n\t}\r\n\r\n\tvar propertyLinker = ['autoplay', 'loop', 'buffered', 'buffered', 'controller', 'currentTime', 'currentSrc', 'duration', 'ended', 'error', 'readyState', 'networkState', 'paused', 'played', 'seekable', 'seeking'];\r\n\r\n\t// Get element audio for output node\r\n\tvar audioOutputNode = false;\r\n\tObject.defineProperty(self, 'audioOutput', {\r\n\t\tget: function(){\r\n\t\t\tif(!audioOutputNode)\r\n\t\t\t\taudioOutputNode = ScarletsMedia.getElementAudioNode(element);\r\n\r\n\t\t\treturn audioOutputNode;\r\n\t\t},\r\n\t\tenumerable: true\r\n\t});\r\n\r\n\tif(element.tagName.toLowerCase() === 'video'){\r\n\t\tpropertyLinker = propertyLinker.concat(['poster', 'height', 'width']);\r\n\r\n\t\t// Get element video for output node\r\n\t\tvar videoOutputNode = false;\r\n\t\tObject.defineProperty(self, 'videoOutput', {\r\n\t\t\tget: function(){\r\n\t\t\t\tif(!videoOutputNode)\r\n\t\t\t\t\tvideoOutputNode = ScarletsMedia.getElementVideoNode(element);\r\n\r\n\t\t\t\treturn videoOutputNode;\r\n\t\t\t},\r\n\t\t\tenumerable: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Reference element function\r\n\tself.load = function(){\r\n\t\telement.load();\r\n\t}\r\n\r\n\tself.canPlayType = function(){\r\n\t\telement.canPlayType();\r\n\t}\r\n\r\n\t// Reference element property\r\n\tfor (var i = 0; i < propertyLinker.length; i++) {\r\n\t\tScarletsMedia.extra.objectPropertyLinker(self, element, propertyLinker[i]);\r\n\t}\r\n\r\n\tself.preload = true;\r\n\telement.preload = 'metadata';\r\n\telement.crossorigin = 'anonymous';\r\n\tself.audioFadeEffect = true;\r\n\r\n\tself.speed = function(set){\r\n\t\tif(set === undefined) return element.defaultPlaybackRate;\r\n\t\telement.defaultPlaybackRate = element.playbackRate = set;\r\n\t}\r\n\r\n\tself.mute = function(set){\r\n\t\tif(set === undefined) return element.muted;\r\n\t\telement.defaultMuted = element.muted = set;\r\n\t}\r\n\r\n\tself.stop = function(){\r\n\t\tself.pause();\r\n\t\tself.currentTime = 0;\r\n\t}\r\n\r\n\tvar volume = 1;\r\n\tself.volume = function(set){\r\n\t\tif(set === undefined) return volume;\r\n\t\telement.volume = volume = set;\r\n\t}\r\n\r\n\tvar stillWaiting = false;\r\n\tfunction play(successCallback, errorCallback){\r\n\t\telement.play().then(function(){\r\n\t\t\tstillWaiting = false;\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t}).catch(function(e){\r\n\t\t\tif(errorCallback) errorCallback(e);\r\n\t\t\telse{\r\n\t\t\t\t// If user haven't interacted with the page\r\n\t\t\t\t// and media play was requested, let's pending it\r\n\t\t\t\tif(userInteracted === false){\r\n\t\t\t\t\tif(stillWaiting === false){\r\n\t\t\t\t\t\twaitingUnlock.push(function(){\r\n\t\t\t\t\t\t\tplay(successCallback, errorCallback);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tself.play = function(successCallback, errorCallback){\r\n\t\tif(!element.paused){\r\n\t\t\tif(successCallback) successCallback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\telement.volume = 0;\r\n\t\t\tplay(successCallback, errorCallback);\r\n\t\t\tScarletsMedia.extra.fadeNumber(0, volume, 0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, successCallback);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tplay(successCallback, errorCallback);\r\n\t}\r\n\r\n\tself.pause = function(callback){\r\n\t\tif(element.paused){\r\n\t\t\tif(callback) callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(self.audioFadeEffect){\r\n\t\t\tScarletsMedia.extra.fadeNumber(volume, 0, -0.02, 400, function(num){\r\n\t\t\t\telement.volume = num;\r\n\t\t\t}, function(){\r\n\t\t\t\telement.pause();\r\n\t\t\t\tif(callback) callback();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telement.pause();\r\n\t\tif(callback) callback();\r\n\t}\r\n\r\n\tself.prepare = function(links, callback, force){\r\n\t\t// Stop playing media\r\n\t\tif(!force && !element.paused)\r\n\t\t\treturn self.pause(function(){\r\n\t\t\t\tself.prepare(links, callback, true);\r\n\t\t\t});\r\n\r\n\t\tvar temp = element.querySelectorAll('source');\r\n\t\tfor (var i = temp.length - 1; i >= 0; i--) {\r\n\t\t\ttemp[i].remove();\r\n\t\t}\r\n\r\n\t\tif(self.preload && callback){\r\n\t\t\tself.once('canplay', callback);\r\n\t\t\tself.once('error', function(){\r\n\t\t\t\tself.off('canplay', callback);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(typeof links === 'string')\r\n\t\t\telement.insertAdjacentHTML('beforeend', `<source src=\"${links.split('\"').join('\\\\\"')}\"/>`);\r\n\t\telse{\r\n\t\t\ttemp = '';\r\n\t\t\tfor (var i = 0; i < links.length; i++) {\r\n\t\t\t\ttemp += `<source src=\"${links[i].split('\"').join('\\\\\"')}\"/>`;\r\n\t\t\t}\r\n\t\t\telement.insertAdjacentHTML('beforeend', temp);\r\n\t\t}\r\n\r\n\t\t// Preload data\r\n\t\tif(self.preload)\r\n\t\t\telement.load();\r\n\r\n\t\telse if(callback)\r\n\t\t\tcallback();\r\n\t}\r\n\r\n\tvar eventRegistered = {};\r\n\tfunction eventTrigger(e){\r\n\t\tfor (var i = 0; i < eventRegistered[e.type].length; i++) {\r\n\t\t\teventRegistered[e.type][i](e, self);\r\n\t\t}\r\n\t}\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\r\n\tself.on = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.addEventListener(eventName, eventTrigger, true);\r\n\t\t\teventRegistered[name] = [];\r\n\t\t}\r\n\t\teventRegistered[name].push(callback);\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.off = function(eventName, callback){\r\n\t\tvar name = eventName.toLowerCase();\r\n\t\tif(eventRegistered[name] === undefined){\r\n\t\t\telement.removeEventListener(eventName, callback, true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(!callback)\r\n\t\t\teventRegistered[name].splice(0);\r\n\t\telse\r\n\t\t\teventRegistered[name].splice(eventRegistered[name].indexOf(callback), 1);\r\n\r\n\t\tif(eventRegistered[name].length === 0){\r\n\t\t\teventRegistered[name] = undefined;\r\n\t\t\telement.removeEventListener(eventName, eventTrigger, true);\r\n\t\t}\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.once = function(eventName, callback){\r\n\t\telement.addEventListener(eventName, callback, {once:true});\r\n\t\treturn self;\r\n\t}\r\n\r\n\tself.destroy = function(){\r\n\t\tfor(var key in eventRegistered){\r\n\t\t\tself.off(key);\r\n\t\t}\r\n\t\tself.playlist.list.splice(0);\r\n\t\tself.playlist.original.splice(0);\r\n\t\tfor(var key in self){\r\n\t\t\tdelete self[key];\r\n\t\t}\r\n\t\tself = null;\r\n\r\n\t\telement.pause();\r\n\t\telement.innerHTML = '';\r\n\t}\r\n\r\n\tvar playlistInitialized = false;\r\n\tfunction internalPlaylistEvent(){\r\n\t\tif(playlistInitialized) return;\r\n\t\tplaylistInitialized = true;\r\n\r\n\t\tself.on('ended', function(){\r\n\t\t\tif(self.playlist.currentIndex < self.playlist.list.length - 1)\r\n\t\t\t\tself.playlist.next(true);\r\n\t\t\telse if(self.playlist.loop)\r\n\t\t\t\tself.playlist.play(0);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction playlistTriggerEvent(name){\r\n\t\tif(!eventRegistered[name]) return;\r\n\t\tfor (var i = 0; i < eventRegistered[name].length; i++) {\r\n\t\t\teventRegistered[name][i](self, self.playlist, self.playlist.currentIndex);\r\n\t\t}\r\n\t}\r\n\r\n\tself.playlist = {\r\n\t\tcurrentIndex:0,\r\n\t\tlist:[],\r\n\t\toriginal:[],\r\n\t\tloop:false,\r\n\t\tshuffled:false,\r\n\r\n\t\t// lists = [{yourProperty:'', stream:['main.mp3', 'fallback.ogg', ..]}, ...]\r\n\t\treload(lists){\r\n\t\t\tthis.original = lists;\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// obj = {yourProperty:'', stream:['main.mp3', 'fallback.ogg']}\r\n\t\tadd(obj){\r\n\t\t\tthis.original.push(obj);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t\tinternalPlaylistEvent();\r\n\t\t},\r\n\r\n\t\t// index from 'original' property\r\n\t\tremove(index){\r\n\t\t\tthis.original.splice(index, 1);\r\n\t\t\tthis.shuffle(this.shuffled);\r\n\t\t},\r\n\r\n\t\tnext(autoplay){\r\n\t\t\tthis.currentIndex++;\r\n\t\t\tif(this.currentIndex >= this.list.length){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = 0;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tprevious(autoplay){\r\n\t\t\tthis.currentIndex--;\r\n\t\t\tif(this.currentIndex < 0){\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.currentIndex = this.list.length - 1;\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.currentIndex++;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(autoplay)\r\n\t\t\t\tthis.play(this.currentIndex);\r\n\t\t\telse playlistTriggerEvent('playlistchange');\r\n\t\t},\r\n\r\n\t\tplay(index){\r\n\t\t\tthis.currentIndex = index;\r\n\t\t\tplaylistTriggerEvent('playlistchange');\r\n\r\n\t\t\tvar src = this.list[index].stream;\r\n\t\t\tif(self.currentSrc === src)\r\n\t\t\t\tself.play();\r\n\t\t\telse self.prepare(this.list[index].stream, function(){\r\n\t\t\t\tself.play();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshuffle(set){\r\n\t\t\tif(set === true){\r\n\t\t\t    var j, x, i;\r\n\t\t\t    for (i = this.list.length - 1; i > 0; i--) {\r\n\t\t\t        j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t        x = this.list[i];\r\n\t\t\t        this.list[i] = this.list[j];\r\n\t\t\t        this.list[j] = x;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\telse this.list = this.original.slice(0);\r\n\r\n\t\t\tthis.shuffled = set;\r\n\t\t}\r\n\t};\r\n}","// options = mediaDevices.getUserMedia({thisData})\r\n// latency = 0ms is not possible (minimum is 70ms, or depend on computer performance)\r\nvar ScarletsMediaPresenter = function(options, latency){\r\n\tvar scope = this;\r\n\tif(!latency) latency = 1000;\r\n\r\n\t// The options are optional\r\n\t//var options = {\r\n\t//    mediaStream: new MediaStream(), // For custom media stream\r\n\t//    element: document.querySelector(...), // Record <audio>, <video>, <canvas>\r\n\t//    screen: true, // Recording the screen\r\n\t//\r\n\t//    audio:{\r\n\t//        channelCount:1,\r\n\t//        echoCancellation: false\r\n\t//    },\r\n\t//    video:{\r\n\t//        frameRate:15,\r\n\t//        width: 1280,\r\n\t//        height: 720,\r\n\t//        facingMode: (front ? \"user\" : \"environment\")\r\n\t//    }\r\n\t//};\r\n\r\n\tscope.debug = false;\r\n\tscope.mediaStream = false;\r\n\r\n\tscope.onRecordingReady = null;\r\n\tscope.onBufferProcess = null;\r\n\tscope.onStop = null;\r\n\r\n\tscope.mediaRecorder = null;\r\n\tscope.recordingReady = false;\r\n\r\n\tscope.recording = false;\r\n\tscope.mediaGranted = false;\r\n\r\n\tif(options === void 0)\r\n\t\toptions = {};\r\n\r\n\tif(options.element !== void 0)\r\n\t\toptions.mediaStream = options.element.captureStream();\r\n\r\n\tscope.debug = options.debug;\r\n\r\n\tscope.workerOptions = options.workerOptions;\r\n\t\r\n\t// Deprecated\r\n\tscope.options = options;\r\n\r\n\tvar mediaType = options.video ? 'video' : 'audio';\r\n\r\n\r\n\tlet MediaRecorder = window.MediaRecorder;\r\n\tlet usingOpusMediaRecorderPolyfill = false;\r\n\r\n\tif(window.OpusMediaRecorder) {\r\n\t\tif(options.alwaysUsePolyfill) {\r\n\t\t\tusingOpusMediaRecorderPolyfill = true;\r\n\t\t}\r\n\t\telse if(!window.MediaRecorder) {\r\n\t\t\tif (!options.mimeType) {\r\n\t\t\t\toptions.mimeType = 'audio/webm;codecs=opus'; // Preferred one\r\n\t\t\t}\r\n\t\t\tusingOpusMediaRecorderPolyfill = OpusMediaRecorder.isTypeSupported(options.mimeType);\r\n\t\t}\r\n\t\telse if(options.mimeType && MediaRecorder.isTypeSupported(options.mimeType)) {\r\n\t\t\tusingOpusMediaRecorderPolyfill = window.MediaRecorder === window.OpusMediaRecorder;\r\n\t\t}\r\n\t\telse if(options.mimeType) {\r\n\t\t\tusingOpusMediaRecorderPolyfill = OpusMediaRecorder.isTypeSupported(options.mimeType);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tusingOpusMediaRecorderPolyfill = window.MediaRecorder === window.OpusMediaRecorder;\r\n\t\t}\r\n\t\t\r\n\t\tif(usingOpusMediaRecorderPolyfill) {\r\n\t\t\tMediaRecorder = OpusMediaRecorder;\r\n\r\n\t\t\tif(mediaType === 'video') {\r\n\t\t\t\tconsole.log(\"opus-media-recorder does not support video recording.\");\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tif (!MediaRecorder) {\r\n\t\tthrow \"MediaRecorder is not available\";\r\n\t}\r\n\r\n\t// Check supported mimeType and codecs for the recorder\r\n\tif(options.mimeType && !MediaRecorder.isTypeSupported(options.mimeType)) {\r\n\t\tconsole.log(\"MediaRecorder doesn't supports mimetype \" + options.mimeType);\r\n\t\toptions.mimeType = null;\r\n\t}\r\n\r\n\tif(!options.mimeType){\r\n\t\tvar supportedMimeType = false;\r\n\t\tvar codecsList = mediaType === 'audio' ? audioCodecs : videoCodecs;\r\n\r\n\t\tfor(var format in codecsList){\r\n\t\t\tvar mimeType = mediaType+'/'+format;\r\n\t\t\tvar codecs = codecsList[format];\r\n\r\n\t\t\tfor (var i = 0; i < codecs.length; i++) {\r\n\t\t\t\tvar temp = mimeType+';codecs='+codecs[i];\r\n\t\t\t\tif(MediaRecorder.isTypeSupported(temp) && MediaSource.isTypeSupported(temp)){\r\n\t\t\t\t\tsupportedMimeType = temp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(supportedMimeType === false && MediaRecorder.isTypeSupported(mimeType) && MediaSource.isTypeSupported(mimeType))\r\n\t\t\t\tsupportedMimeType = mimeType;\r\n\r\n\t\t\tif(supportedMimeType !== false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\toptions.mimeType = supportedMimeType;\r\n\r\n\t\tif (scope.debug) console.log(\"mimeType: \"+supportedMimeType);\r\n\t}\r\n\r\n\tvar mediaGranted = function(mediaStream) {\r\n\t\tscope.mediaGranted = true;\r\n\r\n\t\t// For adding effect later (if audio available)\r\n\t\tif(options.audio !== void 0){\r\n\t\t\tscope.source = ScarletsMedia.audioContext.createMediaStreamSource(mediaStream);\r\n\t\t\tscope.mediaStream = mediaStream = scope.destination.stream;\r\n\r\n\t\t\tif(pendingConnect.length !== 0){\r\n\t\t\t\tfor (var i = 0; i < pendingConnect.length; i++)\r\n\t\t\t\t\tscope.source.connect(pendingConnect[i]);\r\n\r\n\t\t\t\tfirstSourceConnect = false;\r\n\t\t\t\tpendingConnect.length = 0;\r\n\t\t\t}\r\n\t\t\telse scope.source.connect(scope.destination);\r\n\t\t}\r\n\r\n\t\tscope.bufferHeader = null;\r\n\t\tvar bufferHeaderLength = false;\r\n\r\n\t\tif(usingOpusMediaRecorderPolyfill) {\r\n\t\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, options, scope.workerOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tscope.mediaRecorder = new MediaRecorder(mediaStream, options);\r\n\t\t}\r\n\r\n\t\tif(scope.debug) console.log(\"MediaRecorder obtained\");\r\n\t\tscope.mediaRecorder.onstart = function(e) {\r\n\t\t\tscope.recording = true;\r\n\t\t};\r\n\r\n\t\tconst isVideo = options.video !== void 0;\r\n\t\tconst headerLatency = isVideo ? 565 : 100;\r\n\r\n\t\tscope.mediaRecorder.ondataavailable = function(e){\r\n\t\t\t// Stream segments after the header was obtained\r\n\t\t\tif (bufferHeaderLength !== false){\r\n\t\t\t\tvar streamingTime = Number(String(Date.now()).slice(-5, -3));\r\n\t\t\t\tscope.onBufferProcess([e.data, streamingTime]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Return if the recording was stopped\r\n\t\t\tif(scope.mediaRecorder.state !== 'recording')\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(e.data.size <= 1) return;\r\n\r\n\t\t\t// The audio buffer can contain some duration that causes a noise\r\n\t\t\t// So we will need to remove it on streamer side\r\n\t\t\t// Because the AudioBuffer can't be converted to ArrayBuffer with WebAudioAPI\r\n\t\t\tscope.bufferHeader = e.data;\r\n\r\n\t\t\tvar predefinedBuffer = getBufferHeader(scope.mediaRecorder.mimeType);\r\n\t\t\tif(predefinedBuffer !== false)\r\n\t\t\t\tscope.bufferHeader = predefinedBuffer;\r\n\r\n\t\t\tbufferHeaderLength = scope.bufferHeader.size;\r\n\r\n\t\t\tif(bufferHeaderLength > 900 || bufferHeaderLength < 100)\r\n\t\t\t\tconsole.log('%c[WARN] The buffer header length was more than 0.9KB or smaller than 0.1KB. This sometime cause decode error on streamer side. Try to avoid any heavy CPU usage when using the recorder.', \"color:yellow\");\r\n\r\n\t\t\tif(scope.onRecordingReady)\r\n\t\t\t\tscope.onRecordingReady({\r\n\t\t\t\t\tmimeType:options.mimeType,\r\n\t\t\t\t\tstartTime:Date.now(),\r\n\t\t\t\t\thasVideo:isVideo,\r\n\t\t\t\t\tdata:scope.bufferHeader\r\n\t\t\t\t});\r\n\r\n\t\t\tscope.recordingReady = true;\r\n\r\n\t\t\tif(latency === headerLatency) return;\r\n\r\n\t\t\t// Record with the custom latency\r\n\t\t\tscope.mediaRecorder.stop();\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tscope.mediaRecorder.start(latency);\r\n\t\t\t}, 10);\r\n\t\t};\r\n\r\n\t\t// Get first header\r\n\t\tscope.mediaRecorder.start(headerLatency);\r\n\t}\r\n\r\n\tvar pendingConnect = [];\r\n\r\n\tscope.source = void 0;\r\n\tscope.destination = ScarletsMedia.audioContext.createMediaStreamDestination();\r\n\r\n\tvar firstSourceConnect = true;\r\n\tscope.connect = function(node){\r\n\t\tif(scope.source === void 0){\r\n\t\t\tpendingConnect.push(node);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(firstSourceConnect){\r\n\t\t\ttry{\r\n\t\t\t\tscope.source.disconnect(scope.destination);\r\n\t\t\t}catch(e){}\r\n\r\n\t\t\tfirstSourceConnect = false;\r\n\t\t}\r\n\r\n\t\tscope.source.connect(node);\r\n\t}\r\n\r\n\tscope.disconnect = function(node){\r\n\t\tif(scope.source)\r\n\t\t\tscope.source.disconnect(node);\r\n\t\telse{\r\n\t\t\tvar i = pendingConnect.indexOf(node);\r\n\t\t\tif(i === -1)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tpendingConnect.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction reAddTracks(mediaStream) {\r\n\t\tvar streams = mediaStream.getTracks();\r\n\t\tfor(var i = 0; i < streams.length; i++)\r\n\t\t\tscope.mediaRecorder.stream.addTrack(streams[i]);\r\n\r\n\t\tscope.mediaRecorder.start(latency);\r\n\t\tscope.recording = true;\r\n\t}\r\n\r\n\tvar afterStop = false;\r\n\tscope.startRecording = function(){\r\n\t\tif(afterStop){\r\n\t\t\tafterStop = false;\r\n\r\n\t\t\tif(!options.mediaStream){ // Not custom\r\n\t\t\t\tif(!scope.options.screen) // Camera / Audio\r\n\t\t\t\t\tnavigator.mediaDevices.getUserMedia(options).then(reAddTracks).catch(console.error);\r\n\t\t\t\telse // Screen\r\n\t\t\t\t\tnavigator.mediaDevices.getDisplayMedia(options).then(reAddTracks).catch(console.error);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse if(scope.mediaGranted === false || scope.mediaRecorder === null){\r\n\t\t\tscope.recordingReady = false;\r\n\r\n\t\t\tif(options.mediaStream) // Custom\r\n\t\t\t\tmediaGranted(options.mediaStream);\r\n\t\t\telse if(!scope.options.screen) // Camera / Audio\r\n\t\t\t\tnavigator.mediaDevices.getUserMedia(options).then(mediaGranted).catch(console.error);\r\n\t\t\telse // Screen\r\n\t\t\t\tnavigator.mediaDevices.getDisplayMedia(options).then(mediaGranted).catch(console.error);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(scope.mediaRecorder.state !== 'recording'){\r\n\t\t\tscope.mediaRecorder.start(latency);\r\n\t\t\tscope.recording = true;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tscope.stopRecording = function(){\r\n\t\tif (!scope.recording ||!scope.mediaRecorder) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tscope.recording = false;\r\n\t\tscope.mediaRecorder.stop();\r\n\r\n\t\tif(!options.mediaStream){\r\n\t\t\t// Turn off stream from microphone/camera\r\n\t\t\tvar streams = scope.mediaRecorder.stream.getTracks();\r\n\t\t\tfor(var i = 0; i < streams.length; i++){\r\n\t\t\t\tstreams[i].stop();\r\n\t\t\t\tscope.mediaRecorder.stream.removeTrack(streams[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// scope.mediaRecorder.ondataavailable = null;\r\n\t\t// scope.mediaRecorder.onstart = null;\r\n\r\n\t\tscope.bufferHeader = null;\r\n\r\n\t\tafterStop = true;\r\n\r\n\t\tif (scope.onStop) scope.onStop();\r\n\t};\r\n}\r\n\r\nScarletsMediaPresenter.isTypeSupported = function(mimeType){\r\n\tif(!MediaSource.isTypeSupported(mimeType))\r\n\t\treturn \"MediaSource is not supporting this type\";\r\n\tif(!MediaRecorder || !MediaRecorder.isTypeSupported(mimeType) || (window.OpusMediaRecorder && !window.OpusMediaRecorder.isTypeSupported(mimeType)))\r\n\t\treturn \"MediaRecorder is not supporting this type\";\r\n\treturn \"Maybe supported\";\r\n}\r\n","ScarletsMediaEffect.chorus = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dry = context.createGain();\r\n    var wet = context.createGain();\r\n    var splitter = context.createChannelSplitter(2);\r\n    var merger = context.createChannelMerger(2);\r\n    sourceNode.connect(splitter);\r\n    sourceNode.connect(dry);\r\n\r\n    var channel = [{/* left */}, {/* right */}];\r\n\r\n    for (var i = 0; i < channel.length; i++) {\r\n    \tvar c = channel[i];\r\n\r\n    \t// Declaration\r\n    \tc.stream = context.createGain();\r\n    \tc.delayVibrato = context.createDelay();\r\n    \tc.delayFixed = context.createDelay();\r\n    \tc.feedback = context.createGain();\r\n    \tc.feedforward = context.createGain();\r\n    \tc.blend = context.createGain();\r\n\r\n    \t// Connection\r\n\t    splitter.connect(c.stream, i, 0);\r\n\t    c.stream.connect(c.delayVibrato);\r\n\t    c.stream.connect(c.delayFixed);\r\n\t    c.delayVibrato.connect(c.feedforward);\r\n\t    c.delayVibrato.connect(merger, 0, i);\r\n\t    c.delayFixed.connect(c.feedback);\r\n\t    c.feedback.connect(c.stream);\r\n\t    c.blend.connect(merger, 0, i);\r\n    }\r\n\r\n    // Output\r\n    merger.connect(wet);\r\n    dry.connect(output);\r\n    wet.connect(output);\r\n\r\n    // LFO modulation\r\n    var lfo = context.createOscillator();\r\n    var LDepth = context.createGain();\r\n    var RDepth = context.createGain();\r\n    lfo.connect(LDepth);\r\n    lfo.connect(RDepth);\r\n    LDepth.connect(channel[0].delayVibrato.delayTime);\r\n    RDepth.connect(channel[1].delayVibrato.delayTime);\r\n    lfo.start(0);\r\n\r\n    // Settings\r\n    lfo.type = 'sine';\r\n    lfo.frequency.value = 0.15;\r\n    LDepth.gain.value = 0.013;\r\n    RDepth.gain.value = -0.017;\r\n    channel[0].delayFixed.delayTime.value = 0.005;\r\n    channel[1].delayFixed.delayTime.value = 0.007;\r\n    channel[0].delayVibrato.delayTime.value = 0.013;\r\n    channel[1].delayVibrato.delayTime.value = 0.017;\r\n\r\n    var options = {rate:0, intensity:0, mix:0};\r\n\r\n\tvar ret =  {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\trate: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.rate;\r\n\t\t\toptions.rate = value;\r\n\r\n\t    \tvalue = value * 0.29 + 0.01;\r\n\t    \tlfo.frequency.value = value;\r\n\t    },\r\n\r\n\t    intensity: function (value) { // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return options.intensity;\r\n\t\t\toptions.intensity = value;\r\n\r\n\t    \tvar blend = 1.0 - (value * 0.2929);\r\n\t    \tvar feedforward = value * 0.2929 + 0.7071;\r\n\t    \tvar feedback = value * 0.7071;\r\n\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].blend.gain.value = blend;\r\n\t\t    \tchannel[i].feedforward.gain.value = feedforward;\r\n\t\t    \tchannel[i].feedback.gain.value = feedback;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    mix: function (value) {\r\n\t\t\tif(value === undefined) return options.mix;\r\n\t\t\toptions.mix = value;\r\n\t\t\t\r\n\t    \tdry.gain.value = value;\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tlfo.stop(0);\r\n\t\t\tlfo.disconnect();\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < channel.length; i++) {\r\n\t\t    \tchannel[i].stream.disconnect();\r\n\t    \t}\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Initial settings\r\n    ret.rate(0.5);\r\n    ret.intensity(0.0);\r\n    ret.mix(0.75);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.conReverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n    var reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tsourceNode.connect(reverbNode);\r\n\r\n    reverbNode.connect(wetGainNode);\r\n    dryGainNode.connect(output);\r\n    wetGainNode.connect(output);\r\n\r\n    function setBuffer(buffer){\r\n    \tif(reverbNode.buffer !== null){\r\n    \t\treverbNode.disconnect();\r\n    \t\treverbNode = context.createConvolver();\r\n\r\n\t\t\tsourceNode.connect(reverbNode);\r\n\t\t    reverbNode.connect(wetGainNode);\r\n    \t}\r\n    \treverbNode.buffer = buffer;\r\n    }\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This must be set\r\n\t\tsetBuffer:setBuffer,\r\n\r\n\t\t// Load audio buffer from url\r\n\t\tloadBuffer:function(url){\r\n\t\t\tvar ajaxRequest = new XMLHttpRequest();\r\n\t\t\tajaxRequest.open('GET', url, true);\r\n\t\t\tajaxRequest.responseType = 'arraybuffer';\r\n\r\n\t\t\tajaxRequest.onload = function(){\r\n\t\t\t  var audioData = ajaxRequest.response;\r\n\t\t\t  context.decodeAudioData(audioData, function(buffer) {\r\n\t\t\t      setBuffer(buffer);\r\n\t\t\t  }, function(e){\"Error with decoding audio data\" + e.err});\r\n\t\t\t}\r\n\r\n\t\t\tajaxRequest.send();\r\n\t\t},\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.cutOff = function(passType, sourceNode){ // passType: 'lowpass' | 'bandpass' | 'highpass'\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar filterNode = context.createBiquadFilter();\r\n\tfilterNode.type = passType || 'lowpass';\r\n\tfilterNode.frequency.value = 350;\r\n\tfilterNode.Q.value = 1;\r\n\tfilterNode.connect(output);\r\n\tsourceNode.connect(filterNode);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\ttype: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.type;\r\n\t\t\tfilterNode.type = value;\r\n\t\t},\r\n\t\tfrequency: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.frequency.value;\r\n\t\t\tfilterNode.frequency.value = value;\r\n\t\t},\r\n\t\twidth: function(value){\r\n\t\t\tif(value === undefined)\r\n\t\t\t\treturn filterNode.Q.value;\r\n\t\t\tfilterNode.Q.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tfilterNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.delay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tfeedbackGainNode.connect(delayNode);\r\n\r\n\tsourceNode.connect(delayNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\t\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\tdelayNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.distortion = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar deg = 57 * Math.PI / 180;\r\n\r\n\tvar waveShaperNode = context.createWaveShaper();\r\n\twaveShaperNode.connect(output);\r\n\tsourceNode.connect(waveShaperNode);\r\n\r\n\tvar options = {\r\n\t\tamount:0\r\n\t};\r\n\treturn {\r\n\t\tset:function(amount){ // amount: 0 ~ 1\r\n\t\t\tif(amount === undefined) return options.amount;\r\n\t\t\toptions.amount = amount;\r\n\t\t\t\r\n\t\t\tamount = amount * 10;\r\n\t\t    var curve = new Float32Array(context.sampleRate);\r\n\t\t    var temp = 2 / context.sampleRate;\r\n\r\n\t\t    for (var i = 0 ; i < context.sampleRate; i++) {\r\n\t\t    \tvar x = i * temp - 1;\r\n\r\n\t\t    \t// http://kevincennis.github.io/transfergraph/\r\n\t\t    \tcurve[i] = (3 + amount) * x * deg / (Math.PI + amount * Math.abs(x));\r\n\t\t    }\r\n\r\n\t\t    waveShaperNode.curve = curve;\r\n\t\t},\r\n\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\twaveShaperNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t\twaveShaperNode = output = null;\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.dubDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar bqFilterNode = context.createBiquadFilter(); \r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tsourceNode.connect(wetGainNode);\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tfeedbackGainNode.connect(bqFilterNode);\r\n\tbqFilterNode.connect(delayNode);\r\n\tdelayNode.connect(feedbackGainNode);\r\n\tdelayNode.connect(wetGainNode);\r\n\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\t\tcutoff:function(value){ // value: 0 ~ 4000\r\n\t\t\tif(value === undefined) return bqFilterNode.frequency.value;\r\n\t\t\tbqFilterNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\twetGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.7);\r\n\tret.feedback(0.6);\r\n\tret.cutoff(700);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.equalizer = function(frequencies, sourceNode){\r\n\tvar freq = frequencies || [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain(); // Combine all effect\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar equalizer = {};\r\n\tvar lastIndex = freq.length - 1;\r\n\r\n\tfor (var i = 0; i < freq.length; i++) {\r\n        var filter = context.createBiquadFilter(); // Frequency pass\r\n\t\tfilter.gain.value = 0;\r\n        filter.frequency.value = freq[i];\r\n\r\n        if(i === 0) filter.type = 'lowshelf';\r\n        else if(i === lastIndex) filter.type = 'highshelf';\r\n        else filter.type = 'peaking';\r\n\r\n\t\tif(i !== 0)\r\n\t    \tequalizer[freq[i - 1]].connect(filter);\r\n        equalizer[freq[i]] = filter;\r\n\t}\r\n\r\n\tsourceNode.connect(equalizer[freq[0]]);\r\n\tfilter.connect(output);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tfrequency:function(frequency, dB){ // value: -20 ~ 20\r\n\t\t\tif(dB === undefined) return equalizer[frequency].gain.value;\r\n\t\t\tequalizer[frequency].gain.value = dB;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tfor (var i = 0; i < freq.length; i++) {\r\n\t    \t\tequalizer[freq[i]].disconnect(); // filter\r\n\t\t\t}\r\n\t\t\tequalizer.splice(0);\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\tequalizer = output = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.fade = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\toutput.gain.value = 1;\r\n\tsourceNode.connect(output);\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tin:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = (1 - output.gain.value) * value;\r\n\t\t\toutput.gain.setTargetAtTime(1.0, context.currentTime, remainingTime * time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\t\tout:function(value, time, callback){ // value: 0~1, time: in seconds\r\n\t\t\toutput.gain.cancelScheduledValues(context.currentTime);\r\n\r\n\t\t\tvar remainingTime = output.gain.value * value;\r\n\t\t\toutput.gain.setTargetAtTime(0.00001, context.currentTime, remainingTime / time);\r\n\r\n\t\t\tif(callback) setTimeout(callback, time * 1000);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.flanger = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar inputFeedbackNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar delayNode = context.createDelay();\r\n\tvar oscillatorNode = context.createOscillator();\r\n\tvar gainNode = context.createGain();\r\n\tvar feedbackNode = context.createGain();\r\n\toscillatorNode.type = 'sine';\r\n\r\n\tsourceNode.connect(inputFeedbackNode);\r\n\tsourceNode.connect(dryGainNode);\r\n\r\n\tinputFeedbackNode.connect(delayNode);\r\n\tinputFeedbackNode.connect(wetGainNode);\r\n\r\n\tdelayNode.connect(wetGainNode);\r\n\tdelayNode.connect(feedbackNode);\r\n\r\n\tfeedbackNode.connect(inputFeedbackNode);\r\n\r\n\toscillatorNode.connect(gainNode);\r\n\tgainNode.connect(delayNode.delayTime);\r\n\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\toscillatorNode.start(0);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.001, 0.02);\r\n\t\t\tdelayNode.delayTime.value = ScarletsMedia.extra.normalize(value, 0.001, 0.02);\r\n\t\t},\r\n\t\tspeed:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.5, 5);\r\n\t\t\toscillatorNode.frequency.value = ScarletsMedia.extra.normalize(value, 0.5, 5);\r\n\t\t},\r\n\t\tdepth:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0.0005, 0.005);\r\n\t\t\tgainNode.gain.value = ScarletsMedia.extra.normalize(value, 0.0005, 0.005);\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(delayNode.delayTime.value, 0, 0.8);\r\n\t\t\tfeedbackNode.gain.value = ScarletsMedia.extra.normalize(value, 0, 0.8);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tinputFeedbackNode.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.time(0.45);\r\n\tret.speed(0.2);\r\n\tret.depth(0.1);\r\n\tret.feedback(0.1);\r\n\tret.mix(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.harmonizer = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n  \tvar bands = 8;\r\n\r\n\t// Cascading 2 filters for sharp resonance.\r\n    var filters1 = [];\r\n    var filters2 = [];\r\n    var gains = [];\r\n\r\n    for (var i = 0; i < bands; i++) {\r\n      filters1[i] = context.createBiquadFilter();\r\n      filters1[i].type = 'bandpass';\r\n      filters2[i] = context.createBiquadFilter();\r\n      filters2[i].type = 'bandpass';\r\n      sourceNode.connect(filters1[i]);\r\n\r\n      gains[i] = context.createGain();\r\n      gains[i].connect(output);\r\n      filters1[i].connect(filters2[i]).connect(gains[i]);\r\n    }\r\n\r\n    output.gain.value = 35.0;\r\n    var options = {\r\n    \tpitch:0,\r\n    \tslope:0,\r\n    \twidth:0\r\n    };\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\t// Change frequency of filters\r\n\t    pitch: function (value) {\r\n\t\t\tif(value === undefined) return options.pitch;\r\n\t\t\toptions.pitch = value;\r\n\t\t\t\r\n\t    \tvar f0 = ScarletsMedia.convert.midiToFreq(value);\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tfilters1[i].frequency.value = f0;\r\n\t    \t\tfilters2[i].frequency.value = f0;\r\n\t    \t}\r\n\t    },\r\n\r\n\t    slope: function (value) {\r\n\t\t\tif(value === undefined) return options.slope;\r\n\t\t\toptions.slope = value;\r\n\t\t\t\r\n\t    \tfor (var i = 0; i < bands; i++) {\r\n\t    \t\tgains[i].gain.value = 1.0 + Math.sin(Math.PI + (Math.PI/2 * (value + i / bands)));\r\n\t    \t}\r\n\t    },\r\n\r\n\t    width: function (value) {\r\n\t\t\tif(value === undefined) return options.width;\r\n\t\t\toptions.width = value;\r\n\t\t\t\r\n\t    \tfor (var i = 1; i < bands; i++) {\r\n\t    \t\tvar q = 2 + 90 * Math.pow((1 - i / bands), value);\r\n\t    \t\tfilters1[i].Q.value = q;\r\n\t    \t\tfilters2[i].Q.value = q;\r\n\t    \t}\r\n\t    },\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n\t\t    for (var i = 0; i < bands; i++) {\r\n\t\t        filters1[i].disconnect();\r\n\t\t  \t}\r\n\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n    ret.pitch(34);\r\n    ret.slope(0.65);\r\n    ret.width(0.15);\r\n\r\n\treturn ret;\r\n\r\n\t// sample\r\n\t// noise x0.25 -> harmonizer -> reverb x0.85\r\n};","ScarletsMediaEffect.noise = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar length = Math.floor(context.sampleRate * 9.73);\r\n\tvar noiseFloat32 = new Float32Array(length);\r\n\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tnoiseFloat32[i] = Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random()) * 0.5;\r\n\t}\r\n\r\n\tvar noiseBuffer = context.createBuffer(2, length, context.sampleRate);\r\n\tnoiseBuffer.getChannelData(0).set(noiseFloat32, 0);\r\n\tnoiseBuffer.getChannelData(1).set(noiseFloat32, 0);\r\n\r\n    var src = context.createBufferSource();\r\n    src.to(output);\r\n    src.loop = true;\r\n    src.start(0);\r\n    src.buffer = noiseBuffer;\r\n    src.loopStart = Math.random() * 9.73;\r\n\t\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tsrc.loop = false;\r\n\t\t\tsrc.buffer = null;\r\n    \t\tsrc.stop(0);\r\n\t\t\tsrc.disconnect();\r\n\t\t\tsrc = null;\r\n\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};\r\n","ScarletsMediaEffect.pingPongDelay = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\tvar mix = 0;\r\n\r\n\tvar delayNodeLeft = context.createDelay();\r\n\tvar delayNodeRight = context.createDelay();\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar feedbackGainNode = context.createGain();\r\n\tvar channelMerger = context.createChannelMerger(2);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tdelayNodeLeft.connect(channelMerger, 0, 0);\r\n\tdelayNodeRight.connect(channelMerger, 0, 1);\r\n\tdelayNodeLeft.connect(delayNodeRight);\r\n\r\n\tfeedbackGainNode.connect(delayNodeLeft);\r\n\tdelayNodeRight.connect(feedbackGainNode);\r\n\r\n\tsourceNode.connect(feedbackGainNode);\r\n\r\n\tchannelMerger.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\t\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\ttime:function(value){ // value: 0 ~ 180\r\n\t\t\tif(value === undefined) return delayNodeLeft.delayTime.value;\r\n\t\t\tdelayNodeLeft.delayTime.value = value;\r\n\t\t\tdelayNodeRight.delayTime.value = value;\r\n\t\t},\r\n\t\tfeedback:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return feedbackGainNode.gain.value;\r\n\t\t\tfeedbackGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\tfeedbackGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.mix(0.5);\r\n\tret.time(0.3);\r\n\tret.feedback(0.5);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.pitchShift = function(sourceNode){\r\n    var context = ScarletsMedia.audioContext;\r\n    var output = context.createGain();\r\n    var input = sourceNode === undefined ? context.createGain() : null;\r\n    if(input) sourceNode = input;\r\n\r\n    var bufferTime = 0.100;\r\n    var fadeTime = bufferTime / 2;\r\n    var bufferRate = bufferTime * context.sampleRate;\r\n\r\n    // Delay amount for changing pitch.\r\n    var modulateGain1 = context.createGain();\r\n    var modulateGain2 = context.createGain();\r\n\r\n    var delayNode1 = context.createDelay();\r\n    var delayNode2 = context.createDelay();\r\n    modulateGain1.connect(delayNode1.delayTime);\r\n    modulateGain2.connect(delayNode2.delayTime);\r\n\r\n    sourceNode.connect(delayNode1);\r\n    sourceNode.connect(delayNode2);\r\n\r\n    var fTime = context.currentTime + fadeTime;\r\n    var bTime = context.currentTime + bufferTime;\r\n\r\n    function createPitchBuffer(shiftUp){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if(shiftUp)\r\n              pitch[i] = (bufferRate - i) / bufferRate;\r\n            else\r\n              pitch[i] = i / bufferRate;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n    \r\n    // Delay modulation.\r\n    var bufferSource = [0,0,0,0];\r\n    var bufferGain = [0,0,0,0];\r\n    for (var i = 0; i < bufferSource.length; i++) {\r\n        bufferSource[i] = context.createBufferSource();\r\n        bufferSource[i].loop = true;\r\n\r\n        bufferGain[i] = context.createGain();\r\n\r\n        if(i < 2)\r\n            bufferSource[i].buffer = createPitchBuffer(false);\r\n        else {\r\n            bufferSource[i].buffer = createPitchBuffer(true);\r\n            bufferGain[i].gain.value = 0;\r\n        }\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tbufferSource[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tbufferSource[i].start(fTime);\r\n        }\r\n\r\n        bufferSource[i].connect(bufferGain[i]);\r\n    }\r\n\r\n    function createPitchFadeBuffer(){\r\n        var buffer = context.createBuffer(1, bufferRate, context.sampleRate);\r\n        var pitch = buffer.getChannelData(0);\r\n            \r\n        var fadeLength = fadeTime * context.sampleRate;\r\n        var bufferLeft = bufferRate - fadeLength;\r\n        \r\n        // Buffer pitch shift\r\n        for (var i = 0; i < bufferRate; i++) {\r\n            if (i < fadeLength)\r\n                pitch[i] = Math.sqrt(i / fadeLength);\r\n            else\r\n                pitch[i] = Math.sqrt(1 - (i - bufferLeft) / fadeLength);\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    var fadeBuffer = createPitchFadeBuffer();\r\n\r\n    // Delay modulation.\r\n    var fadeNode = [0,0];\r\n    var mixNode = [0,0];\r\n    for (var i = 0; i < fadeNode.length; i++) {\r\n        fadeNode[i] = context.createBufferSource();\r\n        fadeNode[i].loop = true;\r\n        fadeNode[i].buffer = fadeBuffer;\r\n\r\n        mixNode[i] = context.createGain();\r\n    \tmixNode[i].gain.value = 0;\r\n        fadeNode[i].connect(mixNode[i].gain);\r\n\r\n        if(i % 2){ // Odd\r\n            bufferGain[i].connect(modulateGain2);\r\n\t    \tfadeNode[i].start(bTime);\r\n        }\r\n        else { // Even\r\n            bufferGain[i].connect(modulateGain1);\r\n\t    \tfadeNode[i].start(fTime);\r\n        }\r\n\r\n        mixNode[i].connect(output);\r\n    }\r\n    \r\n    delayNode1.connect(mixNode[0]);\r\n    delayNode2.connect(mixNode[1]);\r\n\r\n    function pitchGain(value){\r\n\t    modulateGain1.gain.value = \r\n\t    modulateGain2.gain.value = 0.5 * bufferTime * Math.abs(value);\r\n    }\r\n\r\n    var ret = {\r\n        // Connect to output\r\n        // output.connect(context.destination);\r\n        output:output,\r\n        input:input,\r\n\r\n        // pitchNode:[modulateGain1, modulateGain2],\r\n\r\n        shift:function(value){ // -3 ~ 3\r\n            if(value === undefined) return;\r\n\r\n            var pitchUp = value > 0;\r\n\t\t    bufferGain[0].gain.value = \r\n\t\t    bufferGain[1].gain.value = pitchUp ? 0 : 1;\r\n\t\t    bufferGain[2].gain.value = \r\n\t\t    bufferGain[3].gain.value = pitchUp ? 1 : 0;\r\n\r\n\t\t    pitchGain(value);\r\n        },\r\n\r\n        // This should be executed to clean memory\r\n        destroy:function(){\r\n            if(input) input.disconnect();\r\n            output.disconnect();\r\n\r\n            for (var i = 0; i < fadeNode.length; i++) {\r\n            \tfadeNode[i].stop();\r\n            \tfadeNode[i].disconnect();\r\n            \tmixNode[i].disconnect();\r\n            }\r\n\r\n            for (var i = 0; i < bufferSource.length; i++) {\r\n            \tbufferSource[i].stop();\r\n            \tbufferSource[i].disconnect();\r\n            \tbufferGain[i].disconnect();\r\n            }\r\n\r\n            modulateGain1.disconnect();\r\n\t\t\tmodulateGain2.disconnect();\r\n\t\t\tdelayNode1.disconnect();\r\n\t\t\tdelayNode2.disconnect();\r\n            \r\n            for(var key in this){\r\n                delete this[key];\r\n            }\r\n            output = null;\r\n        }\r\n    };\r\n\r\n    pitchGain(0);\r\n    return ret;\r\n}","ScarletsMediaEffect.reverb = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\t\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar reverbNode = context.createConvolver();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n\t\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar time = 1,\r\n\t\tdecay = 0.1,\r\n\t\treverse = false;\r\n\r\n\tfunction rebuildImpulse(){\r\n\t\tvar length = context.sampleRate * time;\r\n\t\tvar impulse = context.createBuffer(2, length, context.sampleRate);\r\n\t\tvar impulseL = impulse.getChannelData(0);\r\n\t\tvar impulseR = impulse.getChannelData(1);\r\n\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tvar n = reverse ? length - i : i;\r\n\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\r\n\t\t}\r\n\r\n\t    reverbNode.disconnect();\r\n\r\n\t    reverbNode = context.createConvolver();\r\n\t    sourceNode.connect(reverbNode);\r\n\t    reverbNode.connect(wetGainNode);\r\n\r\n\t\treverbNode.buffer = impulse;\r\n\t}\r\n\trebuildImpulse();\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\r\n\t\ttime: function(value){ // value: 0 ~ 3\r\n\t\t\tif(value === undefined) return time;\r\n\t\t\ttime = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\tdecay: function(value){// value: 0 ~ 3\r\n\t\t\tif(value === undefined) return decay;\r\n\t\t\tdecay = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\treverse: function(value){ // value: bool\r\n\t\t\tif(value === undefined) return reverse;\r\n\t\t\treverse = value;\r\n\t\t\trebuildImpulse();\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\treverbNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.stereoPanner = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar stereoSupport = false;\r\n\tif(context.createStereoPanner){\r\n\t\tvar pannerNode = context.createStereoPanner();\r\n\t\tstereoSupport = true;\r\n\t}\r\n\telse {\r\n\t\tvar pannerNode = context.createPanner();\r\n\t\tpannerNode.type = 'equalpower';\r\n\t}\r\n\r\n\tsourceNode.connect(pannerNode);\r\n\tpannerNode.connect(output);\r\n\tpannerNode.pan.value = 0;\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tset:function(pan){ // pan: -1 ~ 1\r\n\t\t\tif(pan === undefined) return pannerNode.pan.value;\r\n\t\t\tif(stereoSupport)\r\n\t\t\t\tpannerNode.pan.value = pan;\r\n\t\t\telse pannerNode.setPosition(pan, 0, 1 - Math.abs(pan));\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tpannerNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = pannerNode = null;\r\n\t\t}\r\n\t};\r\n};","ScarletsMediaEffect.tremolo = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tvar dryGainNode = context.createGain();\r\n\tvar wetGainNode = context.createGain();\r\n\r\n\tvar tremoloGainNode = context.createGain();\r\n\ttremoloGainNode.gain.value = 0;\r\n\r\n\tvar shaperNode = context.createWaveShaper();\r\n\tshaperNode.curve = new Float32Array([0, 1]);\r\n\tshaperNode.connect(tremoloGainNode.gain);\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\r\n\tvar lfoNode = context.createOscillator();\r\n\tlfoNode.connect(shaperNode);\r\n\tlfoNode.type = 'sine';\r\n\tlfoNode.start(0);\r\n\r\n\tsourceNode.connect(tremoloGainNode);\r\n\ttremoloGainNode.connect(wetGainNode);\r\n\twetGainNode.connect(output);\r\n\r\n\tvar ret = {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\r\n\t\tmix: function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return ScarletsMedia.extra.denormalize(lfoNode.frequency.value, 0, 20);\r\n\t\t\tlfoNode.frequency.value = ScarletsMedia.extra.normalize(value, 0, 20);\r\n\t\t},\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return 1 - this.shaperNode.curve[0];\r\n\t\t\tshaperNode.curve = new Float32Array([1 - value, 1]);\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\t\t\tdryGainNode.disconnect();\r\n\t\t\ttremoloGainNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n\r\n\tret.speed(0.2);\r\n\tret.depth(1);\r\n\tret.mix(0.8);\r\n\r\n\treturn ret;\r\n};","ScarletsMediaEffect.vibrato = function(sourceNode){\r\n\tvar context = ScarletsMedia.audioContext;\r\n\tvar output = context.createGain();\r\n\tvar input = sourceNode === undefined ? context.createGain() : null;\r\n\tif(input) sourceNode = input;\r\n\r\n\tconsole.log(\"Vibrato was not finished yet\");\r\n\r\n    var delayNode = context.createDelay();\r\n\tvar wetGainNode = context.createGain();\r\n\tvar dryGainNode = context.createGain();\r\n    var lfoNode = context.createOscillator();\r\n    //var depthNode = context.createGain();\r\n\r\n\tsourceNode.connect(dryGainNode);\r\n\tdryGainNode.connect(output);\r\n\twetGainNode.connect(output);\r\n\r\n    delayNode.delayTime.value = 1;\r\n    //depthNode.gain.value = 1;\r\n    lfoNode.frequency.value = 3;\r\n    lfoNode.type = 'sine';\r\n    lfoNode.start(0);\r\n\r\n    lfoNode.connect(delayNode.delayTime);\r\n    //depthNode.connect(delayNode.delayTime);\r\n    sourceNode.connect(delayNode);\r\n    delayNode.connect(wetGainNode);\r\n\r\n\treturn {\r\n\t\t// Connect to output\r\n\t\t// output.connect(context.destination);\r\n\t\toutput:output,\r\n\t\tinput:input,\r\n\t\t\r\n\t\tmix:function(value){ // value: 0 ~ 1\r\n\t\t\tif(value === undefined) return wetGainNode.gain.value;\r\n\t\t\tdryGainNode.gain.value = 1 - value;\r\n\t\t\twetGainNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdelay:function(value){\r\n\t\t\tif(value === undefined) return delayNode.delayTime.value;\r\n\t\t\tdelayNode.delayTime.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tdepth:function(value){\r\n\t\t\tif(value === undefined) return depthNode.gain.value;\r\n\t\t\tdepthNode.gain.value = value;\r\n\t\t},\r\n\t\t\r\n\t\tspeed:function(value){\r\n\t\t\tif(value === undefined) return lfoNode.frequency.value;\r\n\t\t\tlfoNode.frequency.value = value;\r\n\t\t},\r\n\r\n\t\t// This should be executed to clean memory\r\n\t\tdestroy:function(){\r\n\t\t\tif(input) input.disconnect();\r\n\t\t\toutput.disconnect();\r\n\r\n    \t\tsourceNode.disconnect(delayNode);\r\n    \t\tsourceNode.disconnect(dryGainNode);\r\n\r\n\t\t\tlfoNode.stop();\r\n\t\t\tlfoNode.disconnect();\r\n\t\t\tdepthNode.disconnect();\r\n\t\t\t\r\n\t\t\tfor(var key in this){\r\n\t\t\t\tdelete this[key];\r\n\t\t\t}\r\n\t\t\toutput = null;\r\n\t\t}\r\n\t};\r\n};","// Minimum 3 bufferElement\r\nvar ScarletsVideoStreamer = function(videoElement, chunksDuration){\r\n\tif(!chunksDuration) chunksDuration = 1000;\r\n\tvar chunksSeconds = chunksDuration/1000;\r\n\r\n\tvar scope = this;\r\n\r\n\tscope.debug = false;\r\n\tscope.playing = false;\r\n\tscope.latency = 0;\r\n\tscope.mimeType = null;\r\n\r\n\tscope.audioContext = ScarletsMedia.audioContext;\r\n\tscope.outputNode = false; // Set this to a connectable Audio Node\r\n\r\n\t// If the outputNode is not set, then the audio will be outputted directly\r\n\tvar directAudioOutput = true;\r\n\r\n\tvar mediaBuffer = false;\r\n\tvar audioNode = scope.audioContext.createMediaElementSource(videoElement);\r\n\r\n\tvideoElement.addEventListener('error', function(e){\r\n\t\tconsole.error(e.target.error);\r\n\t});\r\n\r\n\tscope.audioConnect = function(node){\r\n\t\tif(directAudioOutput === true){\r\n\t\t\tdirectAudioOutput = false;\r\n\t\t\taudioNode.disconnect();\r\n\t\t}\r\n\r\n\t\tscope.outputNode = scope.audioContext.createGain();\r\n\t\tscope.outputNode.connect(node);\r\n\t\taudioNode.connect(node);\r\n\t}\r\n\r\n\tscope.audioDisconnect = function(){\r\n\t\toutputNode.disconnect();\r\n\t\tdirectAudioOutput = true;\r\n\r\n\t\taudioNode.disconnect();\r\n\t\taudioNode.connect(scope.audioContext.destination);\r\n\t}\r\n\r\n\tscope.stop = function(){\r\n\t\tmediaBuffer.stop();\r\n\t\tscope.playing = false;\r\n\t\tscope.buffering = false;\r\n\t}\r\n\r\n\tscope.setBufferHeader = function(packet){\r\n\t\tif(!packet || !packet.data)\r\n\t\t\treturn;\r\n\r\n\t\tvar arrayBuffer = packet.data;\r\n\t\tscope.mimeType = packet.mimeType;\r\n\r\n\t\tif(mediaBuffer !== false)\r\n\t\t\tmediaBuffer.stop();\r\n\t\telse audioNode.connect(scope.audioContext.destination);\r\n\r\n\t\tmediaBuffer = new MediaBuffer(scope.mimeType, chunksDuration, arrayBuffer);\r\n\r\n\t\tvideoElement.src = scope.objectURL = mediaBuffer.objectURL;\r\n\t}\r\n\r\n\tscope.playStream = function(){\r\n\t\tscope.playing = true;\r\n\t}\r\n\r\n\tscope.receiveBuffer = function(packet){\r\n\t\tif(scope.playing === false || !mediaBuffer.append) return;\r\n\r\n\t\tvar arrayBuffer = packet[0];\r\n\t\tvar streamingTime = packet[1];\r\n\r\n\t\tmediaBuffer.append(arrayBuffer);\r\n\r\n\t\tif(videoElement.paused)\r\n\t\t\tvideoElement.play();\r\n\r\n\t\tscope.latency = (Number(String(Date.now()).slice(-5, -3)) - streamingTime) + scope.audioContext.baseLatency + chunksSeconds;\r\n\t\tif(scope.debug) console.log(\"Total latency: \"+scope.latency);\r\n\t}\r\n}\r\n","ScarletsMedia.extra = new function(){\r\n\tvar self = this;\r\n\tself.isMobile = function(){\r\n\t    return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator.userAgent);\r\n\t}\r\n\r\n\tself.objectPropertyLinker = function(self, target, property){\r\n\t\tObject.defineProperty(self, property, {\r\n\t\t  get: function(){ return target[property]; },\r\n\t\t  set: function(value){ target[property] = value; },\r\n\t\t  enumerable: true,\r\n\t\t  configurable: true\r\n\t\t});\r\n\t}\r\n\r\n\tself.normalize = function(value, min, max){\r\n\t\treturn ((max - min) * value) + min;\r\n\t}\r\n\r\n\tself.denormalize = function(value, min, max){\r\n\t\treturn (value - min) / (max - min);\r\n\t}\r\n\r\n\tvar maxFade = 0;\r\n\tself.fadeNumber = function(from, to, increment, fadeTime, onIncrease, onFinish){\r\n\t\tmaxFade = 0;\r\n\t\tvar current = from;\r\n\t\tvar interval = fadeTime/(Math.abs(from-to)/Math.abs(increment));\r\n\t\tif(!interval || interval == Infinity){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(onIncrease) onIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t}, fadeTime);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timer = setInterval(function(){\r\n\t\t\tif(maxFade>=100) clearInterval(timer);\r\n\t\t\tmaxFade++;\r\n\r\n\t\t\tcurrent = (current+increment)*1000;\r\n\t\t\tcurrent = Math.ceil(current)/1000;\r\n\r\n\t\t\t//Increasing and current is more than target\r\n\t\t\tif((increment >= 0 && (current >= to || from >= to))\r\n\t\t\t\t||\r\n\t\t\t//Decreasing and current is lower than target\r\n\t\t\t(increment <= 0 && (current <= to || from <= to))\r\n\t\t\t\t||\r\n\t\t\t//Infinity or Zero number\r\n\t\t\t(current == Infinity || !current))\r\n\t\t\t{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t\tonIncrease(to);\r\n\t\t\t\tif(onFinish) onFinish();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(onIncrease) onIncrease(current);\r\n\t\t}, interval);\r\n\t}\r\n\r\n\t// ===== Precise Timer =====\r\n\t//\r\n\tvar timeout = [];\r\n\tvar timeoutIncrement = 0;\r\n\tself.preciseTimeout = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\ttimeoutIncrement++;\r\n\t\ttimeout.push({\r\n\t\t\tid:timeoutIncrement,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func,\r\n\r\n\t\t\t// When browser loss focus\r\n\t\t\tfallback:setTimeout(function(){\r\n\t\t\t\tclearPreciseTimer(timeoutIncrement).func();\r\n\t\t\t}, miliseconds)\r\n\t\t});\r\n\t\tstartPreciseTime();\r\n\t\treturn timeoutIncrement;\r\n\t}\r\n\tself.clearPreciseTimeout = function(id){\r\n\t\tclearPreciseTimer(id, timeout);\r\n\t}\r\n\r\n\tvar interval = [];\r\n\tvar intervalIncrement = 0;\r\n\tself.preciseInterval = function(func, miliseconds){\r\n\t\tvar now = Date.now();\r\n\t\tintervalIncrement++;\r\n\t\tvar temp = {\r\n\t\t\tid:intervalIncrement,\r\n\t\t\tinterval:miliseconds,\r\n\t\t\twhen:now+miliseconds,\r\n\t\t\tfunc:func\r\n\t\t};\r\n\r\n\t\t// When browser loss focus\r\n\t\ttemp.fallback = setInterval(function(){\r\n\t\t\tif(temp.when >= Date.now())\r\n\t\t\t\treturn; // Avoid multiple call\r\n\r\n\t\t\ttemp.when += temp.interval;\r\n\t\t\ttemp.func();\r\n\t\t}, miliseconds);\r\n\r\n\t\tinterval.push(temp);\r\n\t\tstartPreciseTime();\r\n\t\treturn intervalIncrement;\r\n\t}\r\n\tself.clearPreciseInterval = function(id){\r\n\t\tvar temp = clearPreciseTimer(id, interval);\r\n\t\tclearInterval(temp.fallback);\r\n\t}\r\n\r\n\tfunction clearPreciseTimer(id, list){\r\n\t\tfor (var i in list) {\r\n\t\t\tif(list[i].id === id)\r\n\t\t\t\treturn list.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tvar preciseTimerStarted = false;\r\n\tfunction startPreciseTime(){\r\n\t\tif(preciseTimerStarted) return;\r\n\t\tpreciseTimerStarted = true;\r\n\r\n\t\tvar preciseTimer = function(){\r\n\t\t\tif(timeout.length === 0 && interval.length === 0){\r\n\t\t\t\tpreciseTimerStarted = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\trequestAnimationFrame(preciseTimer);\r\n\r\n\t\t\tvar currentTime = Date.now();\r\n\t\t\tfor (var i in timeout) {\r\n\t\t\t\tif(timeout[i].when < currentTime){\r\n\t\t\t\t\ttimeout[i].func();\r\n\t\t\t\t\tclearTimeout(timeout[i].fallback);\r\n\t\t\t\t\ttimeout.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i in interval) {\r\n\t\t\t\tif(interval[i].when < currentTime){\r\n\t\t\t\t\tinterval[i].func();\r\n\t\t\t\t\tinterval[i].when += interval[i].interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\trequestAnimationFrame(preciseTimer);\r\n\t}\r\n};\r\n\r\nif(moduleMode){\r\n\tglobal.Media = ScarletsMedia;\r\n\tglobal.MediaEffect = ScarletsMediaEffect;\r\n\tglobal.AudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.VideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.MediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.MediaPresenter = ScarletsMediaPresenter;\r\n\tglobal.MediaBuffer = MediaBuffer;\r\n}\r\nelse{\r\n\tglobal.ScarletsMedia = ScarletsMedia;\r\n\tglobal.ScarletsMediaEffect = ScarletsMediaEffect;\r\n\tglobal.ScarletsAudioStreamer = ScarletsAudioStreamer;\r\n\tglobal.ScarletsVideoStreamer = ScarletsVideoStreamer;\r\n\tglobal.ScarletsMediaPlayer = ScarletsMediaPlayer;\r\n\tglobal.ScarletsMediaPresenter = ScarletsMediaPresenter;\r\n\tglobal.ScarletsMediaBuffer = MediaBuffer;\r\n}\r\n\r\n// ===== Module End =====\r\n})));"]}