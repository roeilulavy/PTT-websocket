{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\PTT-websocket\\\\client\\\\src\\\\Ptt.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { MediaPresenter, AudioStreamer, Media } from 'sfmediastream';\nimport io from 'socket.io-client';\nimport './Ptt.css';\nimport Hold from './sounds/Hold.mp3';\nimport Transmit from './sounds/transmit.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:9000');\nconst gainNode = Media.audioContext.createGain();\nconst audioStreamer = new AudioStreamer(Audio, 1000);\nconst presenterMedia = new MediaPresenter({\n  audio: {\n    channelCount: 1,\n    echoCancellation: true,\n    noiseSuppression: true\n  }\n}, 250);\nexport default function Ptt() {\n  _s();\n\n  const channelInput = document.getElementById(\"channel-input\");\n  let audio = null;\n  const [state, setState] = useState('');\n  const [id, setId] = useState('');\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\n  const [message, setMessage] = useState('');\n  const [isWarning, setIsWarning] = useState(false);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [connectionError, setConnectionError] = useState(false);\n  const [connectionState, setConnectionState] = useState('');\n  const [isSupported, setIsSupported] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n  audioStreamer.connect(gainNode);\n  gainNode.connect(Media.audioContext.destination);\n  useEffect(() => {\n    if (localStorage.getItem('channel') === null) {\n      localStorage.setItem('channel', 3000);\n    }\n\n    setChannel(localStorage.getItem('channel'));\n  }, []);\n  useEffect(() => {\n    gainNode.gain.value = volume;\n  }, [volume]);\n  useEffect(() => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.log(\"enumerateDevices() not supported.\");\n      setIsWarning(true);\n      setWarningMessage('enumerateDevices() not supported.');\n      setIsSupported(false);\n      return;\n    } else {\n      navigator.mediaDevices.enumerateDevices().then(devices => {\n        const inputList = [];\n        devices.forEach(device => {\n          if (device.kind === 'audioinput') {\n            inputList.push(device);\n          }\n\n          ;\n        });\n\n        if (inputList.length === 0) {\n          setIsWarning(true);\n          setWarningMessage('Recorder device not found!');\n          setIsSupported(false);\n        } else {\n          setIsWarning(false);\n          setWarningMessage('');\n          setIsSupported(true);\n        }\n      });\n    }\n\n    ;\n  }, []);\n  useEffect(() => {\n    socket.on('connect', () => {\n      socket.emit('join-room', channel);\n      setState('Idle');\n      setId(socket.id);\n      console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n    });\n    socket.on('connect_error', () => {\n      setState('Connection-lost');\n      setConnectionError(true);\n      setConnectionState('Connection lost!');\n      console.log('connect_error');\n    });\n    socket.io.on('reconnect_attempt', () => {\n      setState('Reconnecting');\n      setConnectionState('Reconnecting..');\n      console.log('reconnect_attempt');\n    });\n    socket.io.on('reconnect', () => {\n      setState('Idle');\n      setConnectionError(false);\n      setConnectionState('Connected');\n      console.log('reconnected!');\n    });\n    socket.on('receive-sos', id => {\n      setState('Incoming-SOS');\n      setMessage(`S.O.S from: ${id}`);\n      audioStreamer.playStream();\n    });\n    socket.on('receive-sos-end', () => {\n      setState('Idle');\n      setMessage('');\n      audioStreamer.stop();\n    });\n    socket.on('receive-voice-message', id => {\n      setState('Incoming-Broadcast');\n      setMessage(id);\n      audioStreamer.playStream();\n    });\n    socket.on('receive-voice-message-end', () => {\n      setState('Idle');\n      setMessage('');\n      audioStreamer.stop();\n    });\n    socket.on('bufferHeader', data => {\n      audioStreamer.setBufferHeader(data);\n    });\n    socket.on('stream', data => {\n      console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\n      audioStreamer.realtimeBufferPlay(data);\n    });\n  }, [socket]);\n\n  function handleChangeChannel() {\n    if (channelInput.value === '' || state === 'Connection-lost' || state === 'Reconnecting') return;\n    let prevChannel = channel;\n    let newChannel = channelInput.value;\n    localStorage.setItem('channel', newChannel);\n    setChannel(newChannel);\n    socket.emit('change-room', prevChannel, newChannel);\n    channelInput.value = '';\n    channelInput.blur();\n  }\n\n  ;\n\n  function onSosClick() {\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    } else {\n      setState('SOS-Sent');\n      setMessage('SOS Sent');\n      socket.emit('sos-start', id, channel);\n      startRcording();\n      setTimeout(() => {\n        socket.emit('sos-end', channel);\n        stopRcording();\n        setMessage('');\n        setState('Idle');\n      }, 10000);\n    }\n\n    ;\n  }\n\n  ;\n\n  function onPttDown() {\n    if (state === 'SOS-Sent') return;\n\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    }\n\n    ;\n\n    if (state === 'Incoming-Broadcast' || state === 'Incoming-SOS') {\n      audioStreamer.stop();\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n      setTimeout(() => {\n        audioStreamer.playStream();\n      }, 400);\n    }\n\n    ;\n\n    if (state === 'Idle') {\n      audio = new Audio(Transmit);\n      audio.volume = volume;\n      audio.play();\n      setTimeout(() => {\n        socket.emit('voice-message-start', id, channel);\n        startRcording();\n      }, 500);\n    }\n\n    ;\n  }\n\n  ;\n\n  function onPttUp() {\n    if (state === 'SOS-Sent') return;\n    socket.emit('voice-message-end', id, channel);\n    stopRcording();\n  }\n\n  ;\n\n  function startRcording() {\n    presenterMedia.onRecordingReady = packet => {\n      console.log(\"Header size: \" + packet.data.size + \"bytes\");\n      socket.emit('bufferHeader', channel, packet);\n    };\n\n    presenterMedia.onBufferProcess = packet => {\n      console.log(\"Buffer sent: \" + packet[0].size + \"bytes\");\n      socket.emit('stream', channel, packet);\n    };\n\n    presenterMedia.startRecording();\n  }\n\n  ;\n\n  function stopRcording() {\n    presenterMedia.stopRecording();\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ptt\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-id\",\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-channel\",\n        children: channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-talker\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), isWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-warnings\",\n        children: warningMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 24\n      }, this), connectionError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-warnings\",\n        children: connectionState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"channel-label\",\n        htmlFor: \"channel__input\",\n        children: \"Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"channel-input\",\n        className: \"channel__input\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"channel__input-button\",\n        onClick: handleChangeChannel,\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [isSupported && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sos-button\",\n          className: \"sos-button\",\n          type: \"button\",\n          onPointerDown: onSosClick,\n          children: \"S.O.S\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"ptt-button\",\n          className: \"ptt-button\",\n          type: \"button\",\n          onPointerDown: onPttDown,\n          onPointerUp: onPttUp,\n          children: \"PTT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"volume\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.05\",\n        value: volume,\n        onChange: e => setVolume(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ptt, \"n1ZXKkVO7DS2JyHiyNjUovQUPFs=\");\n\n_c = Ptt;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ptt\");","map":{"version":3,"names":["useEffect","useState","MediaPresenter","AudioStreamer","Media","io","Hold","Transmit","socket","gainNode","audioContext","createGain","audioStreamer","Audio","presenterMedia","audio","channelCount","echoCancellation","noiseSuppression","Ptt","channelInput","document","getElementById","state","setState","id","setId","channel","setChannel","localStorage","getItem","message","setMessage","isWarning","setIsWarning","warningMessage","setWarningMessage","connectionError","setConnectionError","connectionState","setConnectionState","isSupported","setIsSupported","volume","setVolume","connect","destination","setItem","gain","value","navigator","mediaDevices","enumerateDevices","console","log","then","devices","inputList","forEach","device","kind","push","length","on","emit","playStream","stop","data","setBufferHeader","byteLength","realtimeBufferPlay","handleChangeChannel","prevChannel","newChannel","blur","onSosClick","play","startRcording","setTimeout","stopRcording","onPttDown","onPttUp","onRecordingReady","packet","size","onBufferProcess","startRecording","stopRecording","e","parseFloat","target"],"sources":["D:/Projects/React/PTT-websocket/client/src/Ptt.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { MediaPresenter, AudioStreamer, Media } from 'sfmediastream';\r\nimport io from 'socket.io-client';\r\nimport './Ptt.css';\r\n\r\nimport Hold from './sounds/Hold.mp3';\r\nimport Transmit from './sounds/transmit.mp3';\r\n\r\nconst socket = io('http://localhost:9000');\r\n\r\nconst gainNode = Media.audioContext.createGain();\r\nconst audioStreamer = new AudioStreamer(Audio, 1000);\r\nconst presenterMedia = new MediaPresenter({\r\n  audio:{\r\n    channelCount: 1,\r\n    echoCancellation: true,\r\n    noiseSuppression: true,\r\n  }\r\n}, 250);\r\n\r\nexport default function Ptt() {\r\n\r\n  const channelInput = document.getElementById(\"channel-input\");\r\n  let audio = null;\r\n\r\n  const [state, setState] = useState('');\r\n  const [id, setId] = useState('');\r\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\r\n  const [message, setMessage] = useState('');\r\n  const [isWarning, setIsWarning] = useState(false);\r\n  const [warningMessage, setWarningMessage] = useState('');\r\n  const [connectionError, setConnectionError] = useState(false);\r\n  const [connectionState, setConnectionState] = useState('');\r\n  const [isSupported, setIsSupported] = useState(false);\r\n  const [volume, setVolume] = useState(0.5);\r\n\r\n  audioStreamer.connect(gainNode);\r\n  gainNode.connect(Media.audioContext.destination);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('channel') === null) {\r\n      localStorage.setItem('channel', 3000);\r\n    }\r\n\r\n    setChannel(localStorage.getItem('channel'));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    gainNode.gain.value = volume;\r\n  }, [volume]);\r\n\r\n  useEffect(() => {\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n      console.log(\"enumerateDevices() not supported.\");\r\n      setIsWarning(true);\r\n      setWarningMessage('enumerateDevices() not supported.');\r\n      setIsSupported(false);\r\n      return;\r\n    } else {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then(devices => {\r\n          const inputList = [];\r\n\r\n          devices.forEach(device => {\r\n            if (device.kind === 'audioinput') {\r\n              inputList.push(device);\r\n            };\r\n          });\r\n\r\n          if (inputList.length === 0) {\r\n            setIsWarning(true);\r\n            setWarningMessage('Recorder device not found!');\r\n            setIsSupported(false);\r\n          } else {\r\n            setIsWarning(false);\r\n            setWarningMessage('');\r\n            setIsSupported(true);\r\n          }\r\n        });\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on('connect', () => {\r\n      socket.emit('join-room', channel);\r\n      setState('Idle');\r\n      setId(socket.id);\r\n      console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\r\n    });\r\n  \r\n    socket.on('connect_error', () => {\r\n      setState('Connection-lost');\r\n      setConnectionError(true);\r\n      setConnectionState('Connection lost!');\r\n      console.log('connect_error');\r\n    });\r\n\r\n    socket.io.on('reconnect_attempt', () => {\r\n      setState('Reconnecting');\r\n      setConnectionState('Reconnecting..');\r\n      console.log('reconnect_attempt');\r\n    });\r\n\r\n    socket.io.on('reconnect', () => {\r\n      setState('Idle');\r\n      setConnectionError(false);\r\n      setConnectionState('Connected');\r\n      console.log('reconnected!');\r\n    });\r\n  \r\n    socket.on('receive-sos', (id) => {\r\n      setState('Incoming-SOS');\r\n      setMessage(`S.O.S from: ${id}`);\r\n      audioStreamer.playStream();\r\n    });\r\n    \r\n    socket.on('receive-sos-end', () => {\r\n      setState('Idle');\r\n      setMessage('');\r\n      audioStreamer.stop();\r\n    });\r\n  \r\n    socket.on('receive-voice-message', (id) => {\r\n      setState('Incoming-Broadcast');\r\n      setMessage(id);\r\n      audioStreamer.playStream();\r\n    });\r\n    \r\n    socket.on('receive-voice-message-end', () => {\r\n      setState('Idle');\r\n      setMessage('');\r\n      audioStreamer.stop();\r\n    });\r\n  \r\n    socket.on('bufferHeader', (data) => {\r\n      audioStreamer.setBufferHeader(data);\r\n    });\r\n    \r\n    socket.on('stream', (data) => {\r\n      console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\r\n      audioStreamer.realtimeBufferPlay(data);\r\n    });\r\n  }, [socket]);\r\n\r\n  function handleChangeChannel() {\r\n    if (channelInput.value === '' || state === 'Connection-lost' || state === 'Reconnecting') return;\r\n\r\n    let prevChannel = channel;\r\n    let newChannel = channelInput.value;\r\n\r\n    localStorage.setItem('channel', newChannel);\r\n    setChannel(newChannel);\r\n\r\n    socket.emit('change-room', prevChannel, newChannel);\r\n    \r\n    channelInput.value = '';\r\n    channelInput.blur();\r\n  };\r\n\r\n  function onSosClick() {\r\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\r\n      audio = new Audio(Hold);\r\n      audio.volume = volume;\r\n      audio.play();\r\n    } else {\r\n      setState('SOS-Sent');\r\n      setMessage('SOS Sent');\r\n\r\n      socket.emit('sos-start', id, channel);\r\n      startRcording();\r\n\r\n      setTimeout(() => {\r\n        socket.emit('sos-end', channel);\r\n        stopRcording();\r\n\r\n        setMessage('');\r\n        setState('Idle');\r\n      }, 10000);\r\n    };\r\n  };\r\n\r\n  function onPttDown() {\r\n\r\n    if (state === 'SOS-Sent') return;\r\n\r\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\r\n      audio = new Audio(Hold);\r\n      audio.volume = volume;\r\n      audio.play();\r\n    };\r\n\r\n    if (state === 'Incoming-Broadcast' || state === 'Incoming-SOS') {\r\n      audioStreamer.stop();\r\n\r\n      audio = new Audio(Hold);\r\n      audio.volume = volume;\r\n      audio.play();\r\n\r\n      setTimeout(() => {\r\n        audioStreamer.playStream();\r\n      }, 400)\r\n    };\r\n\r\n    if (state === 'Idle') {\r\n      audio = new Audio(Transmit);\r\n      audio.volume = volume;\r\n      audio.play();\r\n\r\n      setTimeout(() => {\r\n        socket.emit('voice-message-start', id, channel);\r\n        startRcording();\r\n      }, 500);\r\n    };\r\n  };\r\n\r\n  function onPttUp() {\r\n    if (state === 'SOS-Sent') return;\r\n\r\n    socket.emit('voice-message-end', id, channel);\r\n    stopRcording();\r\n  };\r\n\r\n  function startRcording() {\r\n    presenterMedia.onRecordingReady = (packet) => {\r\n      console.log(\"Header size: \" + packet.data.size + \"bytes\");\r\n      socket.emit('bufferHeader', channel, packet);\r\n    };\r\n  \r\n    presenterMedia.onBufferProcess = (packet) => {\r\n      console.log(\"Buffer sent: \" + packet[0].size + \"bytes\");\r\n      socket.emit('stream', channel, packet);\r\n    };\r\n  \r\n    presenterMedia.startRecording();\r\n  };\r\n\r\n  function stopRcording() {\r\n    presenterMedia.stopRecording();\r\n  };\r\n\r\n  return (\r\n    <div className=\"ptt\">\r\n      <div className='message-container'>\r\n        <p className='message-id'>{id}</p>\r\n        <p className='message-channel'>{channel}</p>\r\n        <p className='message-talker'>{message}</p>\r\n        { isWarning && <p className='message-warnings'>{warningMessage}</p> }\r\n        { connectionError && <p className='message-warnings'>{connectionState}</p> }\r\n      </div>\r\n      <div className='channel-input-container'>\r\n        <label className='channel-label' htmlFor='channel__input'>Channel</label>\r\n        <input type='text' id='channel-input' className='channel__input' autoComplete='off' />\r\n        <button type='submit' className='channel__input-button' onClick={handleChangeChannel}>Join</button>\r\n      </div>\r\n      <div className='buttons-container'>\r\n        {isSupported && \r\n          <>\r\n            <button id='sos-button' className='sos-button' type='button' onPointerDown={onSosClick}>S.O.S</button>\r\n            <button id='ptt-button' className='ptt-button' type='button' onPointerDown={onPttDown} onPointerUp={onPttUp}>PTT</button>\r\n          </>\r\n        }\r\n        <input type='range' id='volume' min='0' max='1' step='0.05' value={volume} onChange={(e) => setVolume(parseFloat(e.target.value))} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}