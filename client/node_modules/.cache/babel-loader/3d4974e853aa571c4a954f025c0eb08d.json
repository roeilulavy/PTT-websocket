{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\PTT-react\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { MediaPresenter, AudioStreamer, Media } from 'sfmediastream';\nimport io from 'socket.io-client';\nimport Hold from './sounds/Hold.mp3';\nimport Transmit from './sounds/transmit.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:9000\");\n\nfunction App() {\n  _s();\n\n  const channelInput = document.getElementById(\"channel-input\");\n  let audio = null;\n  const [state, setState] = useState('');\n  const [message, setMessage] = useState('');\n  const [id, setId] = useState('');\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\n  const [isWarning, setIsWarning] = useState(false);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [volume, setVolume] = useState(0.5);\n  const presenterMedia = new MediaPresenter({\n    audio: {\n      channelCount: 1,\n      echoCancellation: true,\n      noiseSuppression: true\n    }\n  }, 250);\n  const audioStreamer = new AudioStreamer(Audio, 1000);\n  const gainNode = Media.audioContext.createGain();\n  audioStreamer.connect(gainNode);\n  gainNode.connect(Media.audioContext.destination);\n  useEffect(() => {\n    console.info(state);\n  }, [state]);\n  useEffect(() => {\n    if (localStorage.getItem('channel') === null) {\n      localStorage.setItem('channel', 3000);\n    }\n\n    setChannel(localStorage.getItem('channel'));\n  }, []);\n  useEffect(() => {\n    gainNode.gain.value = volume;\n  }, [gainNode.gain, volume]);\n  useEffect(() => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.log(\"enumerateDevices() not supported.\");\n      setIsWarning(true);\n      setWarningMessage('enumerateDevices() not supported.');\n      return;\n    } else {\n      navigator.mediaDevices.enumerateDevices().then(devices => {\n        const inputList = [];\n        devices.forEach(device => {\n          if (device.kind === 'audioinput') {\n            inputList.push(device);\n          }\n\n          ;\n        });\n\n        if (inputList.length === 0) {\n          setIsWarning(true);\n          setWarningMessage('Recorder device not found!');\n        } else {\n          setIsWarning(false);\n          setWarningMessage('');\n        }\n      });\n    }\n\n    ;\n  }, []);\n  socket.on('connect', () => {\n    socket.emit('join-room', channel);\n    setState('Idle');\n    setId(socket.id);\n    console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n  });\n  socket.on('connect_error', error => {\n    setState('Connection-lost');\n    setIsWarning(true);\n    setWarningMessage('Connection lost!');\n    console.log(\"Socket Error: \" + error);\n    socket.disconnect();\n    socket.close();\n    socket.removeAllListeners();\n    setTimeout(() => {\n      setState('Reconnecting');\n      setWarningMessage('Reconnecting..');\n      socket.connect();\n    }, 2000);\n  });\n  socket.on('receive-sos', id => {\n    setState('Incoming-SOS');\n    setMessage(`S.O.S from: ${id}`);\n    audioStreamer.playStream();\n  });\n  socket.on('receive-sos-end', () => {\n    setState('Idle');\n    setMessage('');\n    audioStreamer.stop();\n  });\n  socket.on('receive-voice-message', id => {\n    setState('Incoming-Broadcast');\n    setMessage(id);\n    audioStreamer.playStream();\n  });\n  socket.on('receive-voice-message-end', () => {\n    setState('Idle');\n    setMessage('');\n    audioStreamer.stop();\n  });\n  socket.on('bufferHeader', data => {\n    audioStreamer.setBufferHeader(data);\n  });\n  socket.on('stream', data => {\n    console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\n    audioStreamer.realtimeBufferPlay(data);\n  });\n\n  function handleChangeChannel() {\n    if (channelInput.value === '' || state === 'Connection-lost' || state === 'Reconnecting') return;\n    let prevChannel = channel;\n    let newChannel = channelInput.value;\n    localStorage.setItem('channel', newChannel);\n    setChannel(newChannel);\n    socket.emit('change-room', prevChannel, newChannel);\n    channelInput.value = '';\n    channelInput.blur();\n  }\n\n  ;\n\n  function onSosClick() {\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    } else {\n      setState('SOS-Sent');\n      setMessage('SOS Sent');\n      socket.emit('sos-start', id, channel);\n      startRcording();\n      setTimeout(() => {\n        socket.emit('sos-end', channel);\n        stopRcording();\n        setMessage('');\n        setState('Idle');\n      }, 10000);\n    }\n\n    ;\n  }\n\n  ;\n\n  function onPttDown() {\n    if (state === 'SOS-Sent') return;\n\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    }\n\n    ;\n\n    if (state === 'Incoming-Broadcast' || state === 'Incoming-SOS') {\n      audioStreamer.stop();\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n      setTimeout(() => {\n        audioStreamer.playStream();\n      }, 400);\n    }\n\n    ;\n\n    if (state === 'Idle') {\n      audio = new Audio(Transmit);\n      audio.volume = volume;\n      audio.play();\n      setTimeout(() => {\n        socket.emit('voice-message-start', id, channel);\n        startRcording();\n      }, 500);\n    }\n\n    ;\n  }\n\n  ;\n\n  function onPttUp() {\n    if (state === 'SOS-Sent') return;\n    socket.emit('voice-message-end', id, channel);\n    stopRcording();\n  }\n\n  ;\n\n  function startRcording() {\n    presenterMedia.onRecordingReady = packet => {\n      console.log(\"Header size: \" + packet.data.size + \"bytes\");\n      socket.emit('bufferHeader', channel, packet);\n    };\n\n    presenterMedia.onBufferProcess = packet => {\n      console.log(\"Buffer sent: \" + packet[0].size + \"bytes\");\n      socket.emit('stream', channel, packet);\n    };\n\n    presenterMedia.startRecording();\n  }\n\n  ;\n\n  function stopRcording() {\n    presenterMedia.stopRecording();\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ptt\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-id\",\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-channel\",\n        children: channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-talker\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), isWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-warnings\",\n        children: warningMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"channel-label\",\n        htmlFor: \"channel__input\",\n        children: \"Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"channel-input\",\n        className: \"channel__input\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"channel__input-button\",\n        onClick: handleChangeChannel,\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"sos-button\",\n        className: \"sos-button\",\n        type: \"button\",\n        onPointerDown: onSosClick,\n        children: \"S.O.S\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"ptt-button\",\n        className: \"ptt-button\",\n        type: \"button\",\n        onPointerDown: onPttDown,\n        onPointerUp: onPttUp,\n        children: \"PTT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"volume\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.05\",\n        value: volume,\n        onChange: e => setVolume(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xV6wr60rYg1Y+jJ8ttdoSzElRYY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","MediaPresenter","AudioStreamer","Media","io","Hold","Transmit","socket","connect","App","channelInput","document","getElementById","audio","state","setState","message","setMessage","id","setId","channel","setChannel","localStorage","getItem","isWarning","setIsWarning","warningMessage","setWarningMessage","volume","setVolume","presenterMedia","channelCount","echoCancellation","noiseSuppression","audioStreamer","Audio","gainNode","audioContext","createGain","destination","console","info","setItem","gain","value","navigator","mediaDevices","enumerateDevices","log","then","devices","inputList","forEach","device","kind","push","length","on","emit","error","disconnect","close","removeAllListeners","setTimeout","playStream","stop","data","setBufferHeader","byteLength","realtimeBufferPlay","handleChangeChannel","prevChannel","newChannel","blur","onSosClick","play","startRcording","stopRcording","onPttDown","onPttUp","onRecordingReady","packet","size","onBufferProcess","startRecording","stopRecording","e","parseFloat","target"],"sources":["D:/Projects/React/PTT-react/client/src/App.js"],"sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport { MediaPresenter, AudioStreamer, Media } from 'sfmediastream';\nimport io from 'socket.io-client';\n\nimport Hold from './sounds/Hold.mp3';\nimport Transmit from './sounds/transmit.mp3';\n\nconst socket = io.connect(\"http://localhost:9000\");\n\nfunction App() {\n  const channelInput = document.getElementById(\"channel-input\");\n  let audio = null;\n\n  const [state, setState] = useState('');\n  const [message, setMessage] = useState('');\n  const [id, setId] = useState('');\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\n  const [isWarning, setIsWarning] = useState(false);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [volume, setVolume] = useState(0.5);\n\n  const presenterMedia = new MediaPresenter({\n    audio:{\n      channelCount: 1,\n      echoCancellation: true,\n      noiseSuppression: true,\n    }\n  }, 250);\n\n  const audioStreamer = new AudioStreamer(Audio, 1000);\n  const gainNode = Media.audioContext.createGain();\n  \n  audioStreamer.connect(gainNode);\n  gainNode.connect(Media.audioContext.destination);\n\n  useEffect(() => {\n    console.info(state);\n  }, [state]);\n\n  useEffect(() => {\n    if (localStorage.getItem('channel') === null) {\n      localStorage.setItem('channel', 3000);\n    }\n\n    setChannel(localStorage.getItem('channel'));\n  }, []);\n\n  useEffect(() => {\n    gainNode.gain.value = volume;\n  }, [gainNode.gain, volume]);\n\n  useEffect(() => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.log(\"enumerateDevices() not supported.\");\n      setIsWarning(true);\n      setWarningMessage('enumerateDevices() not supported.');\n      return;\n    } else {\n      navigator.mediaDevices.enumerateDevices()\n        .then(devices => {\n          const inputList = [];\n\n          devices.forEach(device => {\n            if (device.kind === 'audioinput') {\n              inputList.push(device);\n            };\n          });\n\n          if (inputList.length === 0) {\n            setIsWarning(true);\n            setWarningMessage('Recorder device not found!');\n          } else {\n            setIsWarning(false);\n            setWarningMessage('');\n          }\n        });\n    };\n  }, []);\n\n  socket.on('connect', () => {\n    socket.emit('join-room', channel);\n    setState('Idle');\n    setId(socket.id);\n    console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n  });\n\n  socket.on('connect_error', error => {\n    setState('Connection-lost');\n    setIsWarning(true);\n    setWarningMessage('Connection lost!');\n    console.log(\"Socket Error: \" + error);\n    socket.disconnect();\n    socket.close();\n    socket.removeAllListeners();\n  \n    setTimeout(() => {\n      setState('Reconnecting');\n      setWarningMessage('Reconnecting..');\n      socket.connect();\n    }, 2000);\n  });\n\n  socket.on('receive-sos', (id) => {\n    setState('Incoming-SOS');\n    setMessage(`S.O.S from: ${id}`);\n    audioStreamer.playStream();\n  });\n  \n  socket.on('receive-sos-end', () => {\n    setState('Idle');\n    setMessage('');\n    audioStreamer.stop();\n  });\n\n  socket.on('receive-voice-message', (id) => {\n    setState('Incoming-Broadcast');\n    setMessage(id);\n    audioStreamer.playStream();\n  });\n  \n  socket.on('receive-voice-message-end', () => {\n    setState('Idle');\n    setMessage('');\n    audioStreamer.stop();\n  });\n\n  socket.on('bufferHeader', (data) => {\n    audioStreamer.setBufferHeader(data);\n  });\n  \n  socket.on('stream', (data) => {\n    console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\n    audioStreamer.realtimeBufferPlay(data);\n  });\n\n  function handleChangeChannel() {\n    if (channelInput.value === '' || state === 'Connection-lost' || state === 'Reconnecting') return;\n\n    let prevChannel = channel;\n    let newChannel = channelInput.value;\n\n    localStorage.setItem('channel', newChannel);\n    setChannel(newChannel);\n\n    socket.emit('change-room', prevChannel, newChannel);\n    \n    channelInput.value = '';\n    channelInput.blur();\n  };\n\n  function onSosClick() {\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    } else {\n      setState('SOS-Sent');\n      setMessage('SOS Sent');\n\n      socket.emit('sos-start', id, channel);\n      startRcording();\n\n      setTimeout(() => {\n        socket.emit('sos-end', channel);\n        stopRcording();\n\n        setMessage('');\n        setState('Idle');\n      }, 10000);\n    };\n  };\n\n  function onPttDown() {\n\n    if (state === 'SOS-Sent') return;\n\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    };\n\n    if (state === 'Incoming-Broadcast' || state === 'Incoming-SOS') {\n      audioStreamer.stop();\n\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n\n      setTimeout(() => {\n        audioStreamer.playStream();\n      }, 400)\n    };\n\n    if (state === 'Idle') {\n      audio = new Audio(Transmit);\n      audio.volume = volume;\n      audio.play();\n\n      setTimeout(() => {\n        socket.emit('voice-message-start', id, channel);\n        startRcording();\n      }, 500);\n    };\n  };\n\n  function onPttUp() {\n    if (state === 'SOS-Sent') return;\n\n    socket.emit('voice-message-end', id, channel);\n    stopRcording();\n  };\n\n  function startRcording() {\n    presenterMedia.onRecordingReady = (packet) => {\n      console.log(\"Header size: \" + packet.data.size + \"bytes\");\n      socket.emit('bufferHeader', channel, packet);\n    };\n  \n    presenterMedia.onBufferProcess = (packet) => {\n      console.log(\"Buffer sent: \" + packet[0].size + \"bytes\");\n      socket.emit('stream', channel, packet);\n    };\n  \n    presenterMedia.startRecording();\n  };\n\n  function stopRcording() {\n    presenterMedia.stopRecording();\n  };\n\n  return (\n    <div className=\"ptt\">\n      <div className='message-container'>\n        <p className='message-id'>{id}</p>\n        <p className='message-channel'>{channel}</p>\n        <p className='message-talker'>{message}</p>\n        { isWarning &&\n            <p className='message-warnings'>{warningMessage}</p>\n        }\n      </div>\n      <div className='channel-input-container'>\n        <label className='channel-label' htmlFor='channel__input'>Channel</label>\n        <input type='text' id='channel-input' className='channel__input' autoComplete='off' />\n        <button type='submit' className='channel__input-button' onClick={handleChangeChannel}>Join</button>\n      </div>\n      <div className='buttons-container'>\n        <button id='sos-button' className='sos-button' type='button' onPointerDown={onSosClick}>S.O.S</button>\n        <button id='ptt-button' className='ptt-button' type='button' onPointerDown={onPttDown} onPointerUp={onPttUp}>PTT</button>\n        <input type='range' id='volume' min='0' max='1' step='0.05' value={volume} onChange={(e) => setVolume(parseFloat(e.target.value))} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}