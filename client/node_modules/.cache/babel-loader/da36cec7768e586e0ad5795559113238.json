{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\PTT-react\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport Ptt from './Ptt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [socket] = useState(io('http://localhost:9000'));\n  const [id, setId] = useState('');\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\n  useEffect(() => {\n    // const newSocket = io('http://localhost:9000');\n    // setSocket(newSocket);\n    return () => {\n      socket.disconnect();\n      socket.close();\n      socket.removeAllListeners();\n    };\n  }, [socket]);\n  useEffect(() => {\n    if (localStorage.getItem('channel') === null) {\n      localStorage.setItem('channel', 3000);\n    }\n\n    setChannel(localStorage.getItem('channel'));\n  }, []);\n  socket.on('connect', () => {\n    socket.emit('join-room', channel); // setState('Idle');\n\n    setId(socket.id);\n    console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n  });\n  socket.on('connect_error', error => {\n    // setState('Connection-lost');\n    // setIsWarning(true);\n    // setWarningMessage('Connection lost!');\n    console.log(\"Socket Error: \" + error);\n    socket.disconnect();\n    socket.close();\n    socket.removeAllListeners();\n    setTimeout(() => {\n      // setState('Reconnecting');\n      // setWarningMessage('Reconnecting..');\n      socket.connect();\n    }, 2000);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: socket ? /*#__PURE__*/_jsxDEV(Ptt, {\n      socket: socket,\n      id: id,\n      channel: channel,\n      setChannel: setChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Not Connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2xjGqor8rWrGS7jVNURfzJHVCE4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","io","Ptt","App","socket","id","setId","channel","setChannel","localStorage","getItem","disconnect","close","removeAllListeners","setItem","on","emit","console","log","error","setTimeout","connect"],"sources":["D:/Projects/React/PTT-react/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport Ptt from './Ptt';\n\nexport default function App() {\n\n  const [socket] = useState(io('http://localhost:9000'));\n  const [id, setId] = useState('');\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\n\n  useEffect(() => {\n    // const newSocket = io('http://localhost:9000');\n    // setSocket(newSocket);\n    return () => {\n      socket.disconnect();\n      socket.close();\n      socket.removeAllListeners();\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    if (localStorage.getItem('channel') === null) {\n      localStorage.setItem('channel', 3000);\n    }\n\n    setChannel(localStorage.getItem('channel'));\n  }, []);\n\n  socket.on('connect', () => {\n    socket.emit('join-room', channel);\n    // setState('Idle');\n    setId(socket.id);\n    console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n  });\n\n  socket.on('connect_error', error => {\n    // setState('Connection-lost');\n    // setIsWarning(true);\n    // setWarningMessage('Connection lost!');\n    console.log(\"Socket Error: \" + error);\n    socket.disconnect();\n    socket.close();\n    socket.removeAllListeners();\n  \n    setTimeout(() => {\n      // setState('Reconnecting');\n      // setWarningMessage('Reconnecting..');\n      socket.connect();\n    }, 2000);\n  });\n\n  return(\n    <div className=\"App\">\n      { socket ? (\n        <Ptt\n          socket={socket}\n          id={id}\n          channel={channel}\n          setChannel={setChannel}\n        />\n      ) : (\n        <div>Not Connected</div>\n      )}\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAE5B,MAAM,CAACC,MAAD,IAAWJ,QAAQ,CAACC,EAAE,CAAC,uBAAD,CAAH,CAAzB;EACA,MAAM,CAACI,EAAD,EAAKC,KAAL,IAAcN,QAAQ,CAAC,EAAD,CAA5B;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACS,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAD,CAAtC;EAEAX,SAAS,CAAC,MAAM;IACd;IACA;IACA,OAAO,MAAM;MACXK,MAAM,CAACO,UAAP;MACAP,MAAM,CAACQ,KAAP;MACAR,MAAM,CAACS,kBAAP;IACD,CAJD;EAKD,CARQ,EAQN,CAACT,MAAD,CARM,CAAT;EAUAL,SAAS,CAAC,MAAM;IACd,IAAIU,YAAY,CAACC,OAAb,CAAqB,SAArB,MAAoC,IAAxC,EAA8C;MAC5CD,YAAY,CAACK,OAAb,CAAqB,SAArB,EAAgC,IAAhC;IACD;;IAEDN,UAAU,CAACC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAD,CAAV;EACD,CANQ,EAMN,EANM,CAAT;EAQAN,MAAM,CAACW,EAAP,CAAU,SAAV,EAAqB,MAAM;IACzBX,MAAM,CAACY,IAAP,CAAY,WAAZ,EAAyBT,OAAzB,EADyB,CAEzB;;IACAD,KAAK,CAACF,MAAM,CAACC,EAAR,CAAL;IACAY,OAAO,CAACC,GAAR,CAAa,oCAAmCd,MAAM,CAACC,EAAG,gBAAeE,OAAQ,EAAjF;EACD,CALD;EAOAH,MAAM,CAACW,EAAP,CAAU,eAAV,EAA2BI,KAAK,IAAI;IAClC;IACA;IACA;IACAF,OAAO,CAACC,GAAR,CAAY,mBAAmBC,KAA/B;IACAf,MAAM,CAACO,UAAP;IACAP,MAAM,CAACQ,KAAP;IACAR,MAAM,CAACS,kBAAP;IAEAO,UAAU,CAAC,MAAM;MACf;MACA;MACAhB,MAAM,CAACiB,OAAP;IACD,CAJS,EAIP,IAJO,CAAV;EAKD,CAdD;EAgBA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,UACIjB,MAAM,gBACN,QAAC,GAAD;MACE,MAAM,EAAEA,MADV;MAEE,EAAE,EAAEC,EAFN;MAGE,OAAO,EAAEE,OAHX;MAIE,UAAU,EAAEC;IAJd;MAAA;MAAA;MAAA;IAAA,QADM,gBAQN;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EATJ;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GA7DuBL,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}