{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\PTT-react\\\\client\\\\src\\\\Ptt.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { MediaPresenter, AudioStreamer, Media } from 'sfmediastream';\nimport Display from './Display';\nimport './Ptt.css';\nimport Hold from './sounds/Hold.mp3';\nimport Transmit from './sounds/transmit.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Ptt(_ref) {\n  _s();\n\n  let {\n    socket\n  } = _ref;\n  const channelInput = document.getElementById(\"channel-input\");\n  let audio = null;\n  const [state, setState] = useState('');\n  const [message, setMessage] = useState('');\n  const [id, setId] = useState('');\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\n  const [isWarning, setIsWarning] = useState(false);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [volume, setVolume] = useState(0.5);\n  const presenterMedia = new MediaPresenter({\n    audio: {\n      channelCount: 1,\n      echoCancellation: true,\n      noiseSuppression: true\n    }\n  }, 250);\n  const audioStreamer = new AudioStreamer(Audio, 1000);\n  const gainNode = Media.audioContext.createGain();\n  audioStreamer.connect(gainNode);\n  gainNode.connect(Media.audioContext.destination);\n  useEffect(() => {\n    if (localStorage.getItem('channel') === null) {\n      localStorage.setItem('channel', 3000);\n    }\n\n    setChannel(localStorage.getItem('channel'));\n  }, []);\n  useEffect(() => {\n    gainNode.gain.value = volume;\n  }, [gainNode.gain, volume]);\n  useEffect(() => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.log(\"enumerateDevices() not supported.\");\n      setIsWarning(true);\n      setWarningMessage('enumerateDevices() not supported.');\n      return;\n    } else {\n      navigator.mediaDevices.enumerateDevices().then(devices => {\n        const inputList = [];\n        devices.forEach(device => {\n          if (device.kind === 'audioinput') {\n            inputList.push(device);\n          }\n\n          ;\n        });\n\n        if (inputList.length === 0) {\n          setIsWarning(true);\n          setWarningMessage('Recorder device not found!');\n        } else {\n          setIsWarning(false);\n          setWarningMessage('');\n        }\n      });\n    }\n\n    ;\n  }, []);\n  useEffect(() => {\n    socket.on('connect', () => {\n      socket.emit('join-room', channel);\n      setState('Idle');\n      setId(socket.id);\n      console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n    });\n    socket.on('connect_error', error => {\n      setState('Connection-lost');\n      setIsWarning(true);\n      setWarningMessage('Connection lost!');\n      console.log(\"Socket Error: \" + error);\n      socket.disconnect();\n      socket.close();\n      socket.removeAllListeners();\n      setTimeout(() => {\n        setState('Reconnecting');\n        setWarningMessage('Reconnecting..');\n        socket.connect();\n      }, 2000);\n    });\n    socket.on('receive-sos', id => {\n      setState('Incoming-SOS');\n      setMessage(`S.O.S from: ${id}`);\n      audioStreamer.playStream();\n    });\n    socket.on('receive-sos-end', () => {\n      setState('Idle');\n      setMessage('');\n      audioStreamer.stop();\n    });\n    socket.on('receive-voice-message', id => {\n      setState('Incoming-Broadcast');\n      setMessage(id);\n      audioStreamer.playStream();\n    });\n    socket.on('receive-voice-message-end', () => {\n      setState('Idle');\n      setMessage('');\n      audioStreamer.stop();\n    });\n    socket.on('bufferHeader', data => {\n      audioStreamer.setBufferHeader(data);\n    });\n    socket.on('stream', data => {\n      console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\n      audioStreamer.realtimeBufferPlay(data);\n    });\n  }, [socket]); // socket.on('connect', () => {\n  //   socket.emit('join-room', channel);\n  //   setState('Idle');\n  //   setId(socket.id);\n  //   console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n  // });\n  // socket.on('connect_error', error => {\n  //   setState('Connection-lost');\n  //   setIsWarning(true);\n  //   setWarningMessage('Connection lost!');\n  //   console.log(\"Socket Error: \" + error);\n  //   socket.disconnect();\n  //   socket.close();\n  //   socket.removeAllListeners();\n  //   setTimeout(() => {\n  //     setState('Reconnecting');\n  //     setWarningMessage('Reconnecting..');\n  //     socket.connect();\n  //   }, 2000);\n  // });\n  // socket.on('receive-sos', (id) => {\n  //   setState('Incoming-SOS');\n  //   setMessage(`S.O.S from: ${id}`);\n  //   audioStreamer.playStream();\n  // });\n  // socket.on('receive-sos-end', () => {\n  //   setState('Idle');\n  //   setMessage('');\n  //   audioStreamer.stop();\n  // });\n  // socket.on('receive-voice-message', (id) => {\n  //   // setState('Incoming-Broadcast');\n  //   // setMessage(id);\n  //   audioStreamer.playStream();\n  // });\n  // socket.on('receive-voice-message-end', () => {\n  //   // setState('Idle');\n  //   // setMessage('');\n  //   audioStreamer.stop();\n  // });\n  // socket.on('bufferHeader', (data) => {\n  //   audioStreamer.setBufferHeader(data);\n  // });\n  // socket.on('stream', (data) => {\n  //   console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\n  //   audioStreamer.realtimeBufferPlay(data);\n  // });\n\n  function handleChangeChannel() {\n    if (channelInput.value === '' || state === 'Connection-lost' || state === 'Reconnecting') return;\n    let prevChannel = channel;\n    let newChannel = channelInput.value;\n    localStorage.setItem('channel', newChannel);\n    setChannel(newChannel);\n    socket.emit('change-room', prevChannel, newChannel);\n    channelInput.value = '';\n    channelInput.blur();\n  }\n\n  ;\n\n  function onSosClick() {\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    } else {\n      setState('SOS-Sent');\n      setMessage('SOS Sent');\n      socket.emit('sos-start', id, channel);\n      startRcording();\n      setTimeout(() => {\n        socket.emit('sos-end', channel);\n        stopRcording();\n        setMessage('');\n        setState('Idle');\n      }, 10000);\n    }\n\n    ;\n  }\n\n  ;\n\n  function onPttDown() {\n    if (state === 'SOS-Sent') return;\n\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    }\n\n    ;\n\n    if (state === 'Incoming-Broadcast' || state === 'Incoming-SOS') {\n      audioStreamer.stop();\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n      setTimeout(() => {\n        audioStreamer.playStream();\n      }, 400);\n    }\n\n    ;\n\n    if (state === 'Idle') {\n      audio = new Audio(Transmit);\n      audio.volume = volume;\n      audio.play();\n      setTimeout(() => {\n        socket.emit('voice-message-start', id, channel);\n        startRcording();\n      }, 500);\n    }\n\n    ;\n  }\n\n  ;\n\n  function onPttUp() {\n    if (state === 'SOS-Sent') return;\n    socket.emit('voice-message-end', id, channel);\n    stopRcording();\n  }\n\n  ;\n\n  function startRcording() {\n    socket.emit('voice-message-start', id, channel);\n\n    presenterMedia.onRecordingReady = packet => {\n      console.log(\"Header size: \" + packet.data.size + \"bytes\");\n      socket.emit('bufferHeader', channel, packet);\n    };\n\n    presenterMedia.onBufferProcess = packet => {\n      console.log(\"Buffer sent: \" + packet[0].size + \"bytes\");\n      socket.emit('stream', channel, packet);\n    };\n\n    presenterMedia.startRecording();\n  }\n\n  ;\n\n  function stopRcording() {\n    presenterMedia.stopRecording();\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ptt\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-id\",\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-channel\",\n        children: channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-talker\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), isWarning && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message-warnings\",\n        children: warningMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"channel-label\",\n        htmlFor: \"channel__input\",\n        children: \"Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"channel-input\",\n        className: \"channel__input\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"channel__input-button\",\n        onClick: handleChangeChannel,\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"sos-button\",\n        className: \"sos-button\",\n        type: \"button\",\n        onPointerDown: onSosClick,\n        children: \"S.O.S\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"ptt-button\",\n        className: \"ptt-button\",\n        type: \"button\",\n        onPointerDown: onPttDown,\n        onPointerUp: onPttUp,\n        children: \"PTT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"volume\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.05\",\n        value: volume,\n        onChange: e => setVolume(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ptt, \"xV6wr60rYg1Y+jJ8ttdoSzElRYY=\");\n\n_c = Ptt;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ptt\");","map":{"version":3,"names":["useEffect","useState","MediaPresenter","AudioStreamer","Media","Display","Hold","Transmit","Ptt","socket","channelInput","document","getElementById","audio","state","setState","message","setMessage","id","setId","channel","setChannel","localStorage","getItem","isWarning","setIsWarning","warningMessage","setWarningMessage","volume","setVolume","presenterMedia","channelCount","echoCancellation","noiseSuppression","audioStreamer","Audio","gainNode","audioContext","createGain","connect","destination","setItem","gain","value","navigator","mediaDevices","enumerateDevices","console","log","then","devices","inputList","forEach","device","kind","push","length","on","emit","error","disconnect","close","removeAllListeners","setTimeout","playStream","stop","data","setBufferHeader","byteLength","realtimeBufferPlay","handleChangeChannel","prevChannel","newChannel","blur","onSosClick","play","startRcording","stopRcording","onPttDown","onPttUp","onRecordingReady","packet","size","onBufferProcess","startRecording","stopRecording","e","parseFloat","target"],"sources":["D:/Projects/React/PTT-react/client/src/Ptt.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { MediaPresenter, AudioStreamer, Media } from 'sfmediastream';\nimport Display from './Display';\nimport './Ptt.css';\n\nimport Hold from './sounds/Hold.mp3';\nimport Transmit from './sounds/transmit.mp3';\n\nexport default function Ptt({ socket }) {\n\n  const channelInput = document.getElementById(\"channel-input\");\n  let audio = null;\n\n  const [state, setState] = useState('');\n  const [message, setMessage] = useState('');\n  const [id, setId] = useState('');\n  const [channel, setChannel] = useState(localStorage.getItem('channel'));\n  const [isWarning, setIsWarning] = useState(false);\n  const [warningMessage, setWarningMessage] = useState('');\n  const [volume, setVolume] = useState(0.5);\n\n  const presenterMedia = new MediaPresenter({\n    audio:{\n      channelCount: 1,\n      echoCancellation: true,\n      noiseSuppression: true,\n    }\n  }, 250);\n\n  const audioStreamer = new AudioStreamer(Audio, 1000);\n  const gainNode = Media.audioContext.createGain();\n  \n  audioStreamer.connect(gainNode);\n  gainNode.connect(Media.audioContext.destination);\n\n  useEffect(() => {\n    if (localStorage.getItem('channel') === null) {\n      localStorage.setItem('channel', 3000);\n    }\n\n    setChannel(localStorage.getItem('channel'));\n  }, []);\n\n  useEffect(() => {\n    gainNode.gain.value = volume;\n  }, [gainNode.gain, volume]);\n\n  useEffect(() => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.log(\"enumerateDevices() not supported.\");\n      setIsWarning(true);\n      setWarningMessage('enumerateDevices() not supported.');\n      return;\n    } else {\n      navigator.mediaDevices.enumerateDevices()\n        .then(devices => {\n          const inputList = [];\n\n          devices.forEach(device => {\n            if (device.kind === 'audioinput') {\n              inputList.push(device);\n            };\n          });\n\n          if (inputList.length === 0) {\n            setIsWarning(true);\n            setWarningMessage('Recorder device not found!');\n          } else {\n            setIsWarning(false);\n            setWarningMessage('');\n          }\n        });\n    };\n  }, []);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      socket.emit('join-room', channel);\n      setState('Idle');\n      setId(socket.id);\n      console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n    });\n  \n    socket.on('connect_error', error => {\n      setState('Connection-lost');\n      setIsWarning(true);\n      setWarningMessage('Connection lost!');\n      console.log(\"Socket Error: \" + error);\n      socket.disconnect();\n      socket.close();\n      socket.removeAllListeners();\n    \n      setTimeout(() => {\n        setState('Reconnecting');\n        setWarningMessage('Reconnecting..');\n        socket.connect();\n      }, 2000);\n    });\n  \n    socket.on('receive-sos', (id) => {\n      setState('Incoming-SOS');\n      setMessage(`S.O.S from: ${id}`);\n      audioStreamer.playStream();\n    });\n    \n    socket.on('receive-sos-end', () => {\n      setState('Idle');\n      setMessage('');\n      audioStreamer.stop();\n    });\n  \n    socket.on('receive-voice-message', (id) => {\n      setState('Incoming-Broadcast');\n      setMessage(id);\n      audioStreamer.playStream();\n    });\n    \n    socket.on('receive-voice-message-end', () => {\n      setState('Idle');\n      setMessage('');\n      audioStreamer.stop();\n    });\n  \n    socket.on('bufferHeader', (data) => {\n      audioStreamer.setBufferHeader(data);\n    });\n    \n    socket.on('stream', (data) => {\n      console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\n      audioStreamer.realtimeBufferPlay(data);\n    });\n  }, [socket])\n\n  // socket.on('connect', () => {\n  //   socket.emit('join-room', channel);\n  //   setState('Idle');\n  //   setId(socket.id);\n  //   console.log(`You are connected with socketID: ${socket.id} in Channel: ${channel}`);\n  // });\n\n  // socket.on('connect_error', error => {\n  //   setState('Connection-lost');\n  //   setIsWarning(true);\n  //   setWarningMessage('Connection lost!');\n  //   console.log(\"Socket Error: \" + error);\n  //   socket.disconnect();\n  //   socket.close();\n  //   socket.removeAllListeners();\n  \n  //   setTimeout(() => {\n  //     setState('Reconnecting');\n  //     setWarningMessage('Reconnecting..');\n  //     socket.connect();\n  //   }, 2000);\n  // });\n\n  // socket.on('receive-sos', (id) => {\n  //   setState('Incoming-SOS');\n  //   setMessage(`S.O.S from: ${id}`);\n  //   audioStreamer.playStream();\n  // });\n  \n  // socket.on('receive-sos-end', () => {\n  //   setState('Idle');\n  //   setMessage('');\n  //   audioStreamer.stop();\n  // });\n\n  // socket.on('receive-voice-message', (id) => {\n  //   // setState('Incoming-Broadcast');\n  //   // setMessage(id);\n  //   audioStreamer.playStream();\n  // });\n  \n  // socket.on('receive-voice-message-end', () => {\n  //   // setState('Idle');\n  //   // setMessage('');\n  //   audioStreamer.stop();\n  // });\n\n  // socket.on('bufferHeader', (data) => {\n  //   audioStreamer.setBufferHeader(data);\n  // });\n  \n  // socket.on('stream', (data) => {\n  //   console.log(\"Buffer received: \" + data[0].byteLength + \"bytes\");\n  //   audioStreamer.realtimeBufferPlay(data);\n  // });\n\n  function handleChangeChannel() {\n    if (channelInput.value === '' || state === 'Connection-lost' || state === 'Reconnecting') return;\n\n    let prevChannel = channel;\n    let newChannel = channelInput.value;\n\n    localStorage.setItem('channel', newChannel);\n    setChannel(newChannel);\n\n    socket.emit('change-room', prevChannel, newChannel);\n    \n    channelInput.value = '';\n    channelInput.blur();\n  };\n\n  function onSosClick() {\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    } else {\n      setState('SOS-Sent');\n      setMessage('SOS Sent');\n\n      socket.emit('sos-start', id, channel);\n      startRcording();\n\n      setTimeout(() => {\n        socket.emit('sos-end', channel);\n        stopRcording();\n\n        setMessage('');\n        setState('Idle');\n      }, 10000);\n    };\n  };\n\n  function onPttDown() {\n\n    if (state === 'SOS-Sent') return;\n\n    if (state === 'Connection-lost' || state === 'Reconnecting') {\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n    };\n\n    if (state === 'Incoming-Broadcast' || state === 'Incoming-SOS') {\n      audioStreamer.stop();\n\n      audio = new Audio(Hold);\n      audio.volume = volume;\n      audio.play();\n\n      setTimeout(() => {\n        audioStreamer.playStream();\n      }, 400)\n    };\n\n    if (state === 'Idle') {\n      audio = new Audio(Transmit);\n      audio.volume = volume;\n      audio.play();\n\n      setTimeout(() => {\n        socket.emit('voice-message-start', id, channel);\n        startRcording();\n      }, 500);\n    };\n  };\n\n  function onPttUp() {\n    if (state === 'SOS-Sent') return;\n\n    socket.emit('voice-message-end', id, channel);\n    stopRcording();\n  };\n\n  function startRcording() {\n    socket.emit('voice-message-start', id, channel);\n\n    presenterMedia.onRecordingReady = (packet) => {\n      console.log(\"Header size: \" + packet.data.size + \"bytes\");\n      socket.emit('bufferHeader', channel, packet);\n    };\n  \n    presenterMedia.onBufferProcess = (packet) => {\n      console.log(\"Buffer sent: \" + packet[0].size + \"bytes\");\n      socket.emit('stream', channel, packet);\n    };\n  \n    presenterMedia.startRecording();\n  };\n\n  function stopRcording() {\n    presenterMedia.stopRecording();\n  };\n\n  return (\n    <div className=\"ptt\">\n      <div className='message-container'>\n        <p className='message-id'>{id}</p>\n        <p className='message-channel'>{channel}</p>\n        <p className='message-talker'>{message}</p>\n        { isWarning &&\n            <p className='message-warnings'>{warningMessage}</p>\n        }\n      </div>\n      <div className='channel-input-container'>\n        <label className='channel-label' htmlFor='channel__input'>Channel</label>\n        <input type='text' id='channel-input' className='channel__input' autoComplete='off' />\n        <button type='submit' className='channel__input-button' onClick={handleChangeChannel}>Join</button>\n      </div>\n      <div className='buttons-container'>\n        <button id='sos-button' className='sos-button' type='button' onPointerDown={onSosClick}>S.O.S</button>\n        <button id='ptt-button' className='ptt-button' type='button' onPointerDown={onPttDown} onPointerUp={onPttUp}>PTT</button>\n        <input type='range' id='volume' min='0' max='1' step='0.05' value={volume} onChange={(e) => setVolume(parseFloat(e.target.value))} />\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}